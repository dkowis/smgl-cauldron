#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  libcauldron is a set of functions used internally by the cauldron script
##
##=head1 COPYRIGHT
##
##  Copyright 2007 by the Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

# Source the liberror file for error handling
. ${CAULDRON_LIBS}/libinit
. ${CAULDRON_LIBS}/liberror

#-------------------------------------------------------------------------------
# Source needed sorcery library files
#-------------------------------------------------------------------------------
# Needed for modifying config files
. ${SORCERY_LIBS}/libstate
. ${SORCERY_LIBS}/libtrack

#-------------------------------------------------------------------------------
##
## Prepares a chroot environment
##
#-------------------------------------------------------------------------------
function cauldron_chroot_init() {
  mount --bind ${HOSTPATH}/dev ${CAULDRON_BUILD}/dev
  mount --bind ${HOSTPATH}/dev/pts ${CAULDRON_BUILD}/dev/pts
  mount --bind ${HOSTPATH}/proc ${CAULDRON_BUILD}/proc
}

#-------------------------------------------------------------------------------
##
## Cleans up the chroot environment after it is no longer needed
##
#-------------------------------------------------------------------------------
function cauldron_chroot_done() {
  umount ${CAULDRON_BUILD}/proc
  umount ${CAULDRON_BUILD}/dev/pts
  umount ${CAULDRON_BUILD}/dev
}

#-------------------------------------------------------------------------------
##
## Scans the sorcery archspec files to find the host triplet
##
## Later, this will be used to set the value of HOST_TRIPLE in
## /etc/cauldron/config after the code to write the config file is in
## place
##
#-------------------------------------------------------------------------------
function cauldron_get_host_triple() {
  local HOST_ARCH
  local ARCH_SPEC
  local HOST_TRIPLE
  local SPEC_FILE

  # get the value for the HOST triplet from sorcery archspecs
  for spec in ${HOST_ARCH_PATH[@]}
  do
    if [[ $(find --version|grep -q 'version 4\.1\(\.\|$\)') == 1 ]]
    then
      ARCH_SPEC=$(find ${spec} -perm 400 -type f -name ${HOST_ARCH} \
        -print 2>/dev/null)
    else
      ARCH_SPEC=$(find -L ${spec} -perm 400 -type f -name ${HOST_ARCH} \
        -print 2>/dev/null)
    fi
    [[ ARCH_SPEC ]] && break
  done
  HOST_TRIPLE=$(grep "HOST=" ${ARCH_SPEC} | cut -d = -f 2)

  echo ${HOST_TRIPLE}
}

#-------------------------------------------------------------------------------
##
## Generates the base toolchain using the HOST information. This is
## done by unpacking the cache file for each spell required for the
## toolchain if it exists. If it does not exist, this may be because
## caching is disabled on the host machine, or perhaps the cache file
## was deleted by accident. Otherwise the spell must be cast within
## a chroot environment in the CAULDRON_BUILD directory.
##
#-------------------------------------------------------------------------------
function cauldron_base_toolchain() {
  local SPELL
  local VERSION
  local SPELL_CACHE
  local HOST_TRIPLE

  # set the value for HOST_TRIPLE
  HOST_TRIPLE=$(cauldron_get_host_triple)

  # grab the list of spells needed as the base tool-chain which will be
  # used to create the cross-compile tool-chain
  for SPELL in ${HOST_TOOLCHAIN}
  do
    # grab the version for the spell from sorcery's state info
    # on what's installed
    VERSION=$(grep "^${SPELL}" ${HOST_PACKAGES} | cut -d : -f 4)

    if [[ ${VERSION} ]]
    then
      # set SPELL_CACHE as shorthand for SPELL-VERSION-HOST_TRIPLE.tar.bz2
      SPELL_CACHE="${SPELL}-${VERSION}-${HOST_TRIPLE}.tar${CACHE_EXTENSION}"

      # check to see if there is already a cache file from sorcery
      # this check could be based on spell-{names,versions} reported by
      # gaze/sorcery/dispel. Mirroring code in dispel might be the best bet,
      # since that has to find the version currently installed anyway.
      if [[ -f ${HOST_SORCERY_SPOOL}/${SPELL_CACHE} ]]
      then
        # found a cache file, copy it to the BUILD dir
        cp ${HOST_SORCERY_SPOOL}/${SPELL_CACHE} ${CAULDRON_BUILD}
      else
        # couldn't find a cache file, so we'll need to build one
        cauldron_build_cache_file ${SPELL}
      fi
      # unpack the cache file, effectively installing
      # the spell into the BUILD dir
      # the unpacking is done against the BUILD dir as the root dir, so
      # this should not touch the HOST filesystem at all
      tar xjf ${CAULDRON_BUILD}/${SPELL_CACHE} -C ${CAULDRON_BUILD}/
    else
      # the spell is not present on the HOST system, so it must be cast
      # inside a chroot
      cauldron_chroot_init
      chroot ${CAULDRON_BUILD} ${CAULDRON_CAST} ${SPELL}
      cauldron_chroot_done
    fi
  done
}

#-------------------------------------------------------------------------------
## @param spell
##
## Builds a cache file from the information provided by the install log for the
## spell passed as an argument. It expects the provided spell to include the
## version as a suffix (i.e. bash-3.2).
##
#-------------------------------------------------------------------------------
function cauldron_create_cache() {
  local SPELL=$1
  local INSTALL_LOG="${HOSTPATH}/var/log/sorcery/install/${SPELL}"
  local CACHE=${CAULDRON_CACHE}/${SPELL}.tar

  create_cache_archive ${INSTALL_LOG} ${CACHE} ${CACHE}${EXTENSION}
}

#-------------------------------------------------------------------------------
## @param spell
## @param aggressive
##
## Generates a cache file for the given spell. It will try to use information
## from an already installed/cast spell (in the case of the host system having
## sorcery configured to not generate the caches), and, failing that, will cast the
## spell and then dispel it (the second step only being performed if aggressive
## is true).
##
#-------------------------------------------------------------------------------
function cauldron_build_cache_file() {
  local SPELL=$1
  local AGGRESSIVE=$2
  local VERSION=

  # First check to see if the spell was installed, but no cache exists.
  if gaze -q installed $SPELL
  then
    # Spell is installed, generate a cache file using the install log?
    VERSION=$(grep "^${SPELL}" ${HOST_PACKAGES} | cut -d : -f 4)
    cauldron_create_cache ${SPELL}-${VERSION}
  else
    # Only do this part if the caller wants us to be aggressive in building the
    # cache.
    if $AGGRESSIVE
    then
      # Do some trickery to get a cache file. Make sure that sorcery is set to
      # generate a cache file, and if not then either set sorcery to do so or
      # build the cache file afterwards by being recursive? This should be done
      # in a build chroot so that the user's host filesystem is not polluted.
    fi
  fi
}

#-------------------------------------------------------------------------------
## @param stage
##
## Configures the toolchain for building on the TARGET system. In other
## words, this sets the options/variables necessary to build a
## cross-compiler system to generate binaries for the target system. The
## parameter "stage" is an int and sets the variables for stage1 and stage2 of
## the cross-compile. Stage1 is the building of the initial tools. Stage2 is for
## the building of glibc, because it's a little bit special. Stage3 is
## the cross-compilation of the basesystem via sorcery rebuild using the
## cross-compiler.
##
#-------------------------------------------------------------------------------
function cauldron_configure_toolchain() {
  local STAGE=$1

  case ${STAGE} in
    1)
      modify_config ${TARGET_LOCAL_CFG} CUSTOM_CFLAGS \
        "--host=${HOST} --target=${TARGET}"
    ;;
    2)
      modify_config ${TARGET_LOCAL_CFG} CUSTOM_CFLAGS \
        "--build=${HOST} --host=${TARGET}"
    ;;
    3)
      modify_config ${TARGET_LOCAL_CFG} CUSTOM_CFLAGS \
        "--build=${HOST} --host=${TARGET} --target=${TARGET}"
    ;;
  esac
}

#-------------------------------------------------------------------------------
## @param XXX
##
## This builds the cross-compiler to produce the TARGET binaries.
##
#-------------------------------------------------------------------------------
function cauldron_cross_toolchain() {
  # build the stage 1 tools
  cauldron_configure_toolchain 1
  cauldron_chroot_init
  chroot ${CAULDRON_BUILD} ${CAULDRON_CAST} binutils
  chroot ${CAULDRON_BUILD} ${CAULDRON_CAST} gcc
  cauldron_chroot_done

  # build glibc (stage 2)
  cauldron_configure_toolchain 2
  cauldron_chroot_init
  chroot ${CAULDRON_BUILD} ${CAULDRON_CAST} glibc
  cauldron_chroot_done

  # rebuild gcc (still stage 1, but this time linked against the
  # cross-glibc
  cauldron_configure_toolchain 1
  cauldron_chroot_init
  chroot ${CAULDRON_BUILD} ${CAULDRON_CAST} gcc
  cauldron_chroot_done

  # do a sorcery rebuild inside the BUILD dir to
  # generate the cross-compile tool-chain (stage 3)
  cauldron_configure_toolchain 3
  cauldron_chroot_init
  chroot ${CAULDRON_BUILD} ${CAULDRON_REBUILD}
  cauldron_chroot_done
}

#-------------------------------------------------------------------------------
## @param target_spells
##
## Performs cast on the list of spells needed for installation to the target
## system. "target_spells" is a list of spells that will be needed to install
## into the target system from the iso.
##
#-------------------------------------------------------------------------------
function cauldron_build_iso_system() {
  local target_spells=$1
  local spell

  # Since we will be installing from the running ISO system instead of a giant
  # tarball, for each spell we only need to make sure that the cache file is
  # available. This will require that the ISO sorcery has caching enabled. The
  # caching should really be turned on from the very beginning though...
  [[ $ARCHIVE=="off" ]] && return $CERR_ARCHIVE
  cauldron_chroot_init
  for spell in $TARGET_SPELLS
  do
    $CAULDRON_CAST $spell
    $CAULDRON_DISPEL $spell
  done
  cauldron_chroot_done
  return $CERR_OK
}

#-------------------------------------------------------------------------------
## @param CLEANFILE
##
## Cleans out unneeded files that were used to generate the ISO, but should
## not be present on the final ISO system. CLEANFILE is a file that lists paths
## to remove (absolute paths, relative to a chroot of the iso), one file/path
## per line.
##
#-------------------------------------------------------------------------------
function cauldron_clean_iso_system() {
  local CLEANFILE=$1

  [[ -z "$CLEANFILE" ]] && return $CERR_CLEANFILE

  for i in $(sort -r $CLEANFILE)
  do
    if [[ -d $i ]]
    then
      echo "Attempting to remove directory $i..."
      rmdir $i
    else
      echo "Deleting $i"
      rm $i
    fi
  done
  return $CERR_OK
}

#-------------------------------------------------------------------------------
## @param KEEP - whether or not to keep the original .iso file in addition to
## the compressed .iso.bz2
##
## Builds the ISO filesystem using the generated ISO data and the filename
## set in the cauldron config file.
##
#-------------------------------------------------------------------------------
function cauldron_mkisofs() {
  local KEEP=$1

  mkisofs -R -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot \
    -boot-load-size 4 -boot-info-table -o ${SMGL_ISO} ${CAULDRON_BUILD}

  if [[ KEEP == "1" ]] ;
  then
    bzip2 -k ${SMGL_ISO}
  else
    bzip2 ${SMGL_ISO}
  fi
}

#-------------------------------------------------------------------------------
## @param INSTALLER_MODULE
##
## Adds the given installer to the ISO system. The user can then choose this
## installer either at boot-time or run-time, depending on the installer.
## INSTALLER_MODULE is currently one of shell or menu (future: X?). In theory it
## should support any installer, as long as it's packaged in its own directory and
## the name of that dir is passed as the arg. This behavior may change in the
## future though.
##
#-------------------------------------------------------------------------------
function cauldron_add_installer() {
  local MODULE=$1

  cp -r ${CAULDRON_LIBS}/${MODULE} ${CAULDRON_BUILD}/${ENCHANT_DATA}/
  ln -sf ${CAULDRON_BUILD}/${ENCHANT_DATA}/${MODULE}/bin/* \
          ${CAULDRON_BUILD}/usr/sbin/
}

#-------------------------------------------------------------------------------
##
## Wrapper function that calls all the functions necessary to generate the
## final ISO file in the correct order
##
#-------------------------------------------------------------------------------
function cauldron_build_iso() {
  # set up basic tool-chain in order to cross-compile for target later
  cauldron_base_toolchain

  # set up chroot for building inside $CAULDRON_BUILD
  cauldron_chroot_init

  # build the cross-compile tool-chain targeted for the target sys
  if [ -n $TARGET ]
  then
    if [ $TARGET != $HOST ]
    then
      ${CAULDRON_CHROOT} cauldron_cross_toolchain
    fi
  fi

  # use the cross-compile tool-chain to cast all spells needed for
  # the iso system
  ${CAULDRON_CHROOT} cauldron_build_iso_system

  # configure the iso init system, initrd/initramfs, etc.
  ${CAULDRON_CHROOT} cauldron_iso_init

  # build/create/copy/whatever installer system/data into the iso
  ${CAULDRON_CHROOT} cauldron_add_installer

  # remove unnecessary files from iso and free up space
  # this needs to have error-checking added in later
  for cleaner in ${CAULDRON_BASE}/cleaners/* ;
  do
    cp ${CAULDRON_BASE}/cleaners/${cleaner} ${CAULDRON_BUILD}/
    ${CAULDRON_CHROOT} cauldron_clean_iso_system /${cleaner}
    ${CAULDORN_CHROOT} rm /${cleaner}
  done

  # finished with iso building, clean up from chroot setup
  cauldron_chroot_done

  # create the iso fs from the build dir
  cauldron_mkisofs $CAULDRON_KEEPISO
}

#-------------------------------------------------------------------------------
##
## This creates the CAULDRON_BUILD directory, and copies sorcery and
## cauldron files into it. It also configures the CAULDRON_BUILD
## sorcery as necessary (i.e. ensures that CLEAN_SOURCE="off") for
## sanity purposes
##
#-------------------------------------------------------------------------------
function cauldron_prepare() {
  # first, ensure that the build dir exists
  mkdir -p ${CAULDRON_BUILD}

  # copy the host's resolv.conf in order to dl packages from net
  cp -L /etc/resolv.conf ${CAULDRON_BUILD}/etc/resolv.conf

  cauldron_sorcery_install ${CAULDRON_BUILD}
  mkdir -p ${CAULDRON_BUILD}/var/spool/sorcery
  cp -f ${HOSTPATH}/var/spool/sorcery/sorcery-${SORCERY_BRANCH}.tar${EXTENSION}

  # cauldron is a spell
  # there is a spoon
  cauldron_chroot_init
  ${CAULDRON_CHROOT} ${CAULDRON_CAST} cauldron
  cauldron_chroot_done
}


#-------------------------------------------------------------------------------
## @param INSTALL_DIR
##
## Installs sorcery into the ISO system, relative to INSTALL_DIR
##
#-------------------------------------------------------------------------------
function cauldron_sorcery_install() {
}

#-------------------------------------------------------------------------------
##
## Cleans up the tmp directories and such forth
##
#-------------------------------------------------------------------------------
function cauldron_cleanup() {
  [[ ${CAULDRON_CLEAN} == "yes" ]] && rm -fr ${CAULDRON_BUILD}
  rm -fr ${CAULDRON_TMP}
}

#-------------------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
