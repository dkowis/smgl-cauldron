#!/bin/bash
# [not actually a script, just to teach vi proper hilighting]

# Constants for exit codes recognized by the menu launcher
# (menu modules should not exit with anything else,
#  or it'll be treated as an error in the menu module itself)

EXIT_OK=0        # Launches menu on the [now] current step
EXIT_MAINMENU=21 # Brings up the main menu
EXIT_SHELL=22    # Switches to shell installer (after user asked)
EXIT_BAIL=23     # Exit to shell (to be used after weird errors)

# for dialog
export DIALOG_ESC=1 # Treat esc as cancel

# die_cmd [failed_command [displayed_exitcode [exitcode_for_exit]]]
function die_cmd() {
  local rc=${2:-$?}
  local message

  [[ -n $1 ]] &&
    message="Error: $1 failed with exit code $rc, "

  message="${message}bailing out."

  echo "$message" >&2
  exit ${3:-$EXIT_BAIL}
}

# Menu / checklist / whatever
# If this returns 0, use result from dialog, otherwise the user cancelled
function menu_step() {
  "${DIALOG[@]}" "$@"
  rc=$?
  if [[ $rc == 0 ]] ;then # OK
    return 0
  elif [[ $rc == 1 ]] ;then # back
    return 1
  elif [[ $rc == 3 ]] ;then # abort/cancel
    exit $EXIT_MAINMENU
  else
    die_cmd "dialog" $rc
  fi
  return $rc
}

# Displays the doc blurb at the start of a step
# Buttons: OK, main menu, shell
# Only returns normally if the user pressed "OK", otherwise exits
function menu_docbox() {
  "${DIALOG[@]}" "$@"
  rc=$?
  if [[ $rc == 0 ]] ;then
    ((STATE++))
  elif [[ $rc == 1 ]] ;then # main menu
    exit $EXIT_MAINMENU
  elif [[ $rc == 3 ]] ;then # shell
    exit $EXIT_SHELL
  else
    die_cmd "dialog" $rc
  fi
}

function menu_loop() {
  STATE=initial
  while [[ $STATE != mainmenu ]] ;do
    $STATE || # Function call
      die_cmd "State $STATE"
  done

  # Exit to main menu on normal completion of loop
  exit $EXIT_MAINMENU
}
