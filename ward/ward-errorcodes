#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  This goes through all the known sources for both cauldron and enchantment,
##  scans their uses of error codes, and ensures that they are defined in the
##  relevant errorcodes files.
##
##=head1 COPYRIGHT
##
##  Copyright 2010 by the Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

WARD_PATH="${WARD_PATH:-$(dirname $0)}"

if ! . "$WARD_PATH/libward"
then
  echo "error: could not load $WARD_PATH/libward"
  exit 1
fi

function ward_print_usage() {
  cat << EndUsage
Usage: $(basename $0) [-n]

Calls the global_variables delinter to check whether there are error codes used
in the known cauldron and enchantment source files that aren't defined in the
respective errorcodes files. If passed -n, color output is disabled.
EndUsage
}

function ward_usage() {
  ward_print_usage
  exit $ERR_FATAL
}

while [[ "$#" -gt 0 ]]
do
  case "$1" in
    # check if color should be disabled
    "-n")
      LIBCOLOR_NOCOLOR="yes"
      ;;
    # check if the user only wants to process cauldron
    "cauldron")
      PROCESS_ENCHANTMENT="no"
      ;;
    # check if the user only wants to process enchantment
    "enchantment")
      PROCESS_CAULDRON="no"
      ;;
    # unknown argument
    *)
      ward_print_usage
      ;;
  esac
  shift
done

PROCESS_CAULDRON="${PROCESS_CAULDRON:-yes}"
PROCESS_ENCHANTMENT="${PROCESS_ENCHANTMENT:-yes}"

# check cauldron error codes/messages files for internal consistency
if [[ "$PROCESS_CAULDRON" == "yes" ]]
then
  ward_get_sources "cauldron_sources"
  cauldron="$WARD_PATH/../cauldron"
  c_codes="$cauldron/lib/errorcodes"

  libcolor_notice "Checking cauldron errorcodes for internal consistency"
  echo ""
  ward_error_codes "$c_codes"

  # check cauldron files
  libcolor_notice "Checking cauldron sources for undefined error codes"
  echo ""
  ward_error_variables -p "$cauldron" "$c_codes" "${sources[@]}" | \
    grep '[^A-Z_]ERR_[A-Z_]*'
fi

# check enchantment error codes/messages files for internal consistency
if [[ "$PROCESS_ENCHANTMENT" == "yes" ]]
then
  ward_get_sources "enchantment_sources"
  enchantment="$WARD_PATH/../enchantment"
  e_codes="$enchantment/lib/errorcodes"

  libcolor_notice "Checking enchantment errorcodes for internal consistency"
  echo ""
  ward_error_codes "$e_codes"

  # check enchantment files
  libcolor_notice "Checking enchantment sources for undefined error codes"
  echo ""
  ward_error_variables -p "$enchantment" "$e_codes" "${sources[@]}" | \
    grep '[^A-Z_]ERR_[A-Z_]*'
fi

#-------------------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
