#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  Common functions and variables for different installers
##
##=head1 DESCRIPTION
##
##  This file provides common function and variable definitions for
##  the different types of installers that can be included on an ISO.
##  This file is meant to be sourced by the different installers,
##  so this file should not be run directly. This file, as well as
##  the installer which sources this file, is meant to be called from
##  inside the ISO during the actual install onto the target system.
##
##=head1 COPYRIGHT
##
##  Copyright 2009 The Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# enchantment includes
#-------------------------------------------------------------------------------
. ${BASE_LIBS}/libinit ||
  cauldron_fatal_error "error: cannot load base libraries!"
. ${BASE_LIBS}/liberror ||
  cauldron_fatal_error "error: cannot load base libraries!"
. ${BASE_LIBS}/liberrorcodes ||
  cauldron_fatal_error "error: cannot load base libraries!"

# load cauldron error code and message defines
. ${ENCHANT_LIBS}/errorcodes ||
  enchant_fatal_error "error: cannot load enchantment libraries!"

#-------------------------------------------------------------------------------
##
## @param kernel
## @param linux_version
##
## Copies the kernel and it's associated modules from the ISO to the TARGET
## system. Requires that / and /boot on the TARGET system are mounted. It is
## capable of copying multiple kernels, but for now the ISO will only have 1
## kernel.
##
#-------------------------------------------------------------------------------
function enchant_copy_kernel() {
  local KERNEL=$1
  local LINUX_VER=$2

  # copy the kernel itself over
  cp ${ENCHANT_ISO}/boot/${KERNEL} ${ENCHANT_TARGET}/boot/;

  # copy the modules over
  cp --parents -r ${ENCHANT_ISO}/lib/modules/${LINUX_VER}/* ${ENCHANT_TARGET};

  # make sure that the proper dep info is generated on the target system
  depmod -a -b ${ENCHANT_TARGET}/lib/modules/${LINUX_VER} ${LINUX_VER};
}

#-------------------------------------------------------------------------------
##
## Sets the installer system to a sane, known initial state. Should only be
## called when first entering the installer system or ISO.
##
#-------------------------------------------------------------------------------
function enchant_prepare() {
  # this initializes the file which holds the current step
  mkdir -p "${ENCHANT_TMP}"
  echo 'init' >$ENCHANT_STATUS

  # the next lines are to init the history files
  mkdir -p "${ENCHANT_TMP}/history"
  cat < /dev/null > "${ENCHANT_BACK}"
  cat < /dev/null > "${ENCHANT_FORWARD}"
}

#-------------------------------------------------------------------------------
##
## Cleans up the tmp directories and such forth
##
#-------------------------------------------------------------------------------
function enchant_cleanup() {
  rm -fr ${ENCHANT_TMP}
}

#-------------------------------------------------------------------------------
##
## Determines and returns the next step in the installation procedure
##
#-------------------------------------------------------------------------------
function enchant_getnext() {
  local step

  # get current step
  step=$(cat $ENCHANT_STATUS)
  # find next step
  step=$(grep "^${step}:" $ENCHANT_DATA/order | head -n 1 | cut -d: -f2)
  # check if next step is a branch
  [[ ${step} == *'|'* ]] && step=""
  # if we couldn't find a next step, jump to 'error'
  step=${step:-error}
  # print out new status
  echo "$step"
}

#-------------------------------------------------------------------------------
##
## Determines and returns the next step in the installation procedure
##
#-------------------------------------------------------------------------------
function enchant_setnext() {
  local step

  # get old status
  step=$(cat $ENCHANT_STATUS)
  # find next status
  step=$(grep "^$step:" $ENCHANT_DATA/order | head -n 1 | cut -d: -f2)
  # if we couldn't find a next status, jump to 'error'
  step=${step:-error}
  # save new status
  enchant_setstep $step
}

#-------------------------------------------------------------------------------
##
## Determines and returns the previous step in the installation procedure
##
#-------------------------------------------------------------------------------
function enchant_getprev() {
  local step

  step=$(cat $ENCHANT_STATUS)
  step=$(grep ":${step}$" $ENCHANT_DATA/order | tail -n 1 | cut -d: -f1)
  step=${step:-error}
  echo "$step"
}

#-------------------------------------------------------------------------------
##
## Determines and returns the previous step in the installation procedure
##
#-------------------------------------------------------------------------------
function enchant_setprev() {
  local step

  step=$(cat $ENCHANT_STATUS)
  step=$(grep ":$CURSTEP$" $ENCHANT_DATA/order | tail -n 1 | cut -d: -f1)
  step=${CURSTEP:-error}
  enchant_setstep $step
}

#-------------------------------------------------------------------------------
##
## Moves the installer backward in its history (like the back button on a
## web browser.
##
#-------------------------------------------------------------------------------
function enchant_back() {
  # if the forward history is empty, then we can't go forward
  [[ $(wc -l < ${ENCHANT_BACK}) -eq 0 ]] && return $EERR_BACK

  # if the max history size has been reached, then we drop the oldest item
  [[ $(wc -l < ${ENCHANT_FORWARD}) -ge $ENCHANT_HISTORY ]] &&
    sed -i "" 1d ${ENCHANT_FORWARD}

  # copy the current status to the forward history, so we can go forward to
  # where we are after we jump back
  cat < ${ENCHANT_STATUS} >> ${ENCHANT_FORWARD}
  # set the current step to be the one we are jumping to
  tail -n 1 ${ENCHANT_BACK} > ${ENCHANT_STATUS}
  # remove the step we jumped to from the back history
  sed -i "" $d ${ENCHANT_BACK}
}

#-------------------------------------------------------------------------------
##
## Moves the installer forward in its history (like the forward button on a
## web browser.
##
#-------------------------------------------------------------------------------
function enchant_forward() {
  # if the forward history is empty, then we can't go forward
  [[ $(wc -l < ${ENCHANT_FORWARD}) -eq 0 ]] && return $EERR_FORWARD

  # if the max history size has been reached, then we drop the oldest item
  [[ $(wc -l < ${ENCHANT_BACK}) -ge $ENCHANT_HISTORY ]] &&
    sed -i "" 1d ${ENCHANT_BACK}

  # copy the current status to the back history, so we can go back to where we
  # are after we jump forward
  cat < ${ENCHANT_STATUS} >> ${ENCHANT_BACK}
  # set the current step to be the one we are jumping to
  tail -n 1 ${ENCHANT_FORWARD} > ${ENCHANT_STATUS}
  # remove the step we jumped to from the forward history
  sed -i "" $d ${ENCHANT_FORWARD}
}

#-------------------------------------------------------------------------------
##
## Returns the number of the current step to perform during the installation
##
#-------------------------------------------------------------------------------
function enchant_getnum() {
  local step

  step=$(cat $ENCHANT_STATUS)
  grep -n "$step" $ENCHANT_DATA/steps | cut -d: -f1
}

#-------------------------------------------------------------------------------
##
## Returns the total number of steps to perform during the installation
##
#-------------------------------------------------------------------------------
function enchant_gettotal() {
  wc -l < $ENCHANT_DATA/steps
}

#-------------------------------------------------------------------------------
##
## Determines and returns the current step in the installation procedure
##
#-------------------------------------------------------------------------------
function enchant_getstep() {
  cat $ENCHANT_STATUS
}

#-------------------------------------------------------------------------------
##
## @param step
##
## Sets the current step of the installer to be the step passed as an argument
##
#-------------------------------------------------------------------------------
function enchant_setstep() {
  local step=$1
  local good=0
  local listed=

  cat $ENCHANT_DATA/steps | cut -d" " -f1 |
  while read listed
  do
    if [[ "$step" = "$listed" ]]
    then
      good=1
      echo "$step" >$ENCHANT_STATUS
      # Now we do some work for the back history
      # if the max history size has been reached, then we drop the oldest item
      [[ $(wc -l < ${ENCHANT_BACK}) -ge $ENCHANT_HISTORY ]] &&
        sed -i "" 1d ${ENCHANT_BACK}
      # copy the current status to the back history, so we can go back to where we
      # are after we jump forward
      cat < ${ENCHANT_STATUS} >> ${ENCHANT_BACK}
      return $EERR_OK
    fi
  done
  return $EERR_STEP
}


#-------------------------------------------------------------------------------
##=back
##
##=head1 LICENSE
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
