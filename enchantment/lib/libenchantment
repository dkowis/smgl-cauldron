#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  Common functions and variables for different installers
##
##=head1 DESCRIPTION
##
##  This file provides common function and variable definitions for
##  the different types of installers that can be included on an ISO.
##  This file is meant to be sourced by the different installers,
##  so this file should not be run directly. This file, as well as
##  the installer which sources this file, is meant to be called from
##  inside the ISO during the actual install onto the target system.
##
##=head1 COPYRIGHT
##
##  Copyright 2009 The Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

# set LC_COLLATE to C so we don't get affected by the user's locale
# when grepping, sorting, etc.
export LC_COLLATE="C"

# shorthand and non-hardcoded /dev/null for output dumping
ENCHANT_NULL="${ENCHANT_NULL:-/dev/null}"

#-------------------------------------------------------------------------------
##
## Used only when checking initialization of the library and a fatal error
## occurs. Afterwards, functions from liberror are used instead.
##
#-------------------------------------------------------------------------------
function enchant_fatal_error() {
  echo "$1"
  exit 1
}

#-------------------------------------------------------------------------------
# liberror includes
#-------------------------------------------------------------------------------
. "$ENCHANT_BASE/liberror" ||
  enchant_fatal_error "error: cannot load base library liberror"

# load enchantment error code and message defines
. "$ENCHANT_LIBS/errorcodes" ||
  enchant_fatal_error "error: cannot load enchantment error codes"

. "$ENCHANT_BASE/libcolor" ||
  enchant_fatal_error "error: cannot load base library libcolor"

# test/set whether color output should be enabled
[[ "$ENCHANT_COLOR" != "yes" || "$(grep -q 'nocolor' /proc/cmdline)" ]] &&
  LIBCOLOR_NOCOLOR="yes"

# drop enchant_fatal_error if liberror was successfully loaded
unset enchant_fatal_error

#-------------------------------------------------------------------------------
## @param library name to load (no path, just basename)
##
## Loads the library given as the first argument. liberror_check_fatal is
## called to check if there was a problem loading the library, and if there was
## it will print a corresponding error message and then exit with the error
## $ERR_LOAD_LIBRARY.
##
#-------------------------------------------------------------------------------
function enchant_load_library() {
  local lib="$1"

  . "$ENCHANT_LIBS/$lib" 2>$ENCHANT_NULL
  liberror_check_fatal
}

#-------------------------------------------------------------------------------
# enchant includes
#-------------------------------------------------------------------------------
enchant_load_library "lib.chroot"
enchant_load_library "lib.i18n"
enchant_load_library "lib.install"
enchant_load_library "lib.modules"
enchant_load_library "lib.potion"

#-------------------------------------------------------------------------------
# function definitions
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
##
## Sets the installer system to a sane, known initial state. Should only be
## called when first entering the installer system or ISO.
##
#-------------------------------------------------------------------------------
function enchant_prepare() {
  # this initializes the file which holds the current step
  mkdir -p "$ENCHANT_TMP" || return $ERR_PREPARE
  echo 'init' > "$ENCHANT_STATUS" || return $ERR_PREPARE

  # the next lines are to init the history files
  mkdir -p "$ENCHANT_TMP/history" || return $ERR_PREPARE
  cat < $ENCHANT_NULL > "$ENCHANT_BACK" || return $ERR_PREPARE
  cat < $ENCHANT_NULL > "$ENCHANT_FORWARD" || return $ERR_PREPARE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Cleans up the tmp directories and such forth
##
#-------------------------------------------------------------------------------
function enchant_cleanup() {
  rm -fr "$ENCHANT_TMP" || return $ERR_CLEANUP

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Determines and returns the current module in the installation procedure.
##
#-------------------------------------------------------------------------------
function enchant_get_current() {
  [[ -z "$ENCHANT_STATUS" ]] && return $ERR_GET_CURRENT

  cat "$ENCHANT_STATUS" || return $ERR_GET_CURRENT

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## @param step
##
## Sets the current module of the installer to be the step passed as an
## argument. Stores the current module to the back history before setting it to
## the new module.
##
#-------------------------------------------------------------------------------
function enchant_set_current() {
  local module="$1"

  if ! $(enchant_modules_list | grep -q "$module")
  then
    return $ERR_SET_CURRENT
  fi

  enchant_modules_exit || return $ERR_MODULE_EXIT

  # if the max history size has been reached, then we drop the oldest item
  if [[ "$(wc -l < $ENCHANT_BACK)" -ge "$ENCHANT_HISTORY_SIZE" ]]
  then
    sed -i '1d' "$ENCHANT_BACK" || return $ERR_SET_CURRENT
  fi

  # copy the current module to the back history
  echo "$module" >> "$ENCHANT_BACK" || return $ERR_SET_CURRENT

  # check the installation state
  enchant_potion_update || return $ERR_POTION_UPDATE

  # set the current module
  echo "$module" > "$ENCHANT_STATUS" || return $ERR_SET_CURRENT

  enchant_modules_enter || return $ERR_MODULE_ENTER

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Determines and returns the next module in the installation procedure.
##
#-------------------------------------------------------------------------------
function enchant_get_next() {
  local step
  step="$(grep -m1 \"^$(enchant_get_current):\" $ENCHANT_DATA/modules)" ||
    return $ERR_GET_NEXT

  step="$(echo $step | cut -d: -f2)" || return $ERR_GET_NEXT

  if [[ -z "$step" ]]
  then
    echo "error"
    return $ERR_GET_NEXT
  fi

  echo $step

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Sets the current module to the next module in the installation procedure.
##
#-------------------------------------------------------------------------------
function enchant_set_next() {
  local module

  # get next step
  module="$(enchant_get_next)" || return $ERR_SET_NEXT

  # save new status
  enchant_set_step "$module" || return $ERR_SET_NEXT

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Determines and returns the previous module in the installation procedure.
##
#-------------------------------------------------------------------------------
function enchant_get_prev() {
  local step

  # get the current step
  step="$(enchant_get_current)" || return $ERR_GET_PREV

  step="$(grep -m1 \":$step$\" $ENCHANT_DATA/order)" || return $ERR_GET_PREV

  step="$(echo $step | cut -d: -f1)" || return $ERR_GET_PREV

  if [[ -z "$step" ]]
  then
    echo "error"
    return $ERR_GET_PREV
  fi

  echo "$step"

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Sets the current module to the previous module in the installation procedure.
##
#-------------------------------------------------------------------------------
function enchant_set_prev() {
  local module

  # get the current step
  module="$(enchant_get_prev)" || return $ERR_SET_PREV

  enchant_set_current "$module" || return $ERR_SET_PREV

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Moves the installer backward in its history (like the back button on a
## web browser).
##
## when you go back, you store/save the forward pages
##
#-------------------------------------------------------------------------------
function enchant_back() {
  # if the back history is empty, then we can't go back
  [[ "$(wc -l < $ENCHANT_BACK)" -eq 0 ]] && return $ERR_HISTORY_BACK

  # if the max forward history size has been reached
  if [[ "$(wc -l < $ENCHANT_FORWARD)" -ge "$ENCHANT_HISTORY_SIZE" ]]
  then
    # then we drop the oldest item from the forward history
    sed -i '1d' "$ENCHANT_FORWARD" || return $ERR_HISTORY_BACK
  fi

  # copy the current status to the forward history, so we can go forward to
  # where we are after we jump back
  enchant_get_current >> "$ENCHANT_FORWARD" || return $ERR_HISTORY_BACK

  # set the current step to be the one we are jumping to
  tail -n 1 "$ENCHANT_BACK" > "$ENCHANT_STATUS" || return $ERR_HISTORY_BACK

  # remove the step we jumped to from the back history
  sed -i '$d' "$ENCHANT_BACK" || return $ERR_HISTORY_BACK

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Moves the installer forward in its history (like the forward button on a
## web browser.
##
## when you go forward, you store/save the back pages
##
#-------------------------------------------------------------------------------
function enchant_forward() {
  # if the forward history is empty, then we can't go forward
  [[ "$(wc -l < $ENCHANT_FORWARD)" -eq 0 ]] && return $ERR_HISTORY_FORWARD

  # if the max back history size has been reached
  if [[ "$(wc -l < $ENCHANT_BACK)" -ge "$ENCHANT_HISTORY_SIZE" ]]
  then
    # then we drop the oldest item from the back history
    sed -i '1d' "$ENCHANT_BACK" || return $ERR_HISTORY_FORWARD
  fi

  # copy the current status to the back history, so we can go back to where we
  # are after we jump forward
  enchant_get_current >> "$ENCHANT_BACK" || return $ERR_HISTORY_FORWARD

  # set the current step to be the one we are jumping to
  tail -n 1 "$ENCHANT_FORWARD" > "$ENCHANT_STATUS" || return $ERR_HISTORY_FORWARD

  # remove the step we jumped to from the forward history
  sed -i '$d' "$ENCHANT_FORWARD" || return $ERR_HISTORY_FORWARD

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##=back
##
##=head1 LICENSE
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
