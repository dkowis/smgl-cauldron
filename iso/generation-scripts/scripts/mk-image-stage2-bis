#!/static/bin/bash

# Author: Benoit PAPILLAULT <benoit.papillault@free.fr>
# Creation : 24/07/2003

# changing ownership
chown -R 0:0 /static

# CC="gcc -I /dynamic/include -L /dynamic/lib -B/dynamic/lib -Wl,-rpath-link,/dynamic/lib"

# creating directories
mkdir -p /etc # for /etc/passwd
#mkdir -p /dynamic/{bin,boot,dev/pts,etc/opt,home,lib,mnt,proc} &&
#mkdir -p /dynamic/{sbin,tmp,usr/local,var,opt} &&
#for dirname in /dynamic/usr /dynamic/usr/local
#    do
#    mkdir -p $dirname/{bin,etc,include,lib,sbin,share,src}
#    ln -sf share/{man,doc,info} $dirname
#    mkdir -p $dirname/share/{dict,doc,info,locale,man}
#    mkdir -p $dirname/share/{nls,misc,terminfo,zoneinfo}
#    mkdir -p $dirname/share/man/man{1,2,3,4,5,6,7,8}
#done &&
#mkdir -p /dynamic/usr/lib/locale &&
#mkdir -p /dynamic/var/{lock,log,mail,run,spool} &&
#mkdir -p /dynamic/var/{tmp,opt,cache,lib/misc,local} &&
#mkdir -p /dynamic/opt/{bin,doc,include,info} &&
#mkdir -p /dynamic/opt/{lib,man/man{1,2,3,4,5,6,7,8}} &&
#ln -sf ../var/tmp /dynamic/usr

#chmod 1777 /tmp /var/tmp

# creating /bin/bash & /bin/sh symlinks
mkdir -p /bin &&
ln -sf /static/bin/bash /bin/bash &&
ln -sf bash /bin/sh

# creating /lib/cpp
mkdir -p /lib &&
ln -sf /static/bin/cpp /lib/cpp

# creating /bin/pwd
mkdir -p /bin &&
ln -sf /static/bin/pwd /bin/pwd

# creating the passwd & group files
mkdir -p /root
echo "root:x:0:0:root:/root:/bin/bash" > /etc/passwd

cat > /etc/group << "EOF"
root:x:0:
bin:x:1:
sys:x:2:
kmem:x:3:
tty:x:4:
tape:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
EOF

# define ${files[@]} with the file passed in the first command line
# argument

while read line;
do
  file=`eval echo "${line}"`
  files[$((i++))]="${file}"
done < /tmp/files.stage2

# sources should be under /tmp/src & compilation under /tmp/obj
#rm -rf /tmp/obj &&
mkdir -p /dynamic/obj &&
cd /dynamic/obj || exit -1

# compiles everything statically
for file in ${files[@]}
do
  file=`basename "${file}"`
  if [ -f "${file}.install" ]; then
      continue;
  fi
  (
      echo "extracting ${file}"
      case "${file}" in
          glibc-linuxthreads-*)
              # no need to extract this package
              base="."
              ;;
          *.tar.gz)
              if ! tar zxvf "../src/${file}"; then
                  echo "extracting ${file} failed"
                  exit -1
              fi
              base=`basename "${file}" .tar.gz`
              ;;
          *.tgz)
              if ! tar zxvf "../src/${file}"; then
                  echo "extracting ${file} failed"
                  exit -1
              fi
              base=`basename "${file}" .tgz`
              ;;
          *.tar.bz2)
              if ! tar jxvf "../src/${file}"; then
                  echo "extracting ${file} failed"
                  exit -1
              fi
              base=`basename "${file}" .tar.bz2`
              ;;
          *.bz2)
              base=`basename "${file}" .bz2`
              mkdir -p "${base}"
              if ! bunzip2 -c "../src/${file}" > "${base}/${base}"; then
                  echo "extracting ${file} failed";
                  exit -1
              fi
              ;;
          *.patch)
              # nothing need to be done
              base="."
              ;;
          *)
              echo "don't know how to extract ${file}"
              exit -1
              ;;
      esac
      cd "${base}"
      echo "compiling ${file} in ${base}"
      case "${file}" in
          *.patch)
              # nothing need to be done
              ;;
          MAKEDEV*)
              cp "${base}" /dev/MAKEDEV
              chmod a+x /dev/MAKEDEV
              (cd /dev ; ./MAKEDEV generic-nopty)
              ;;
          linux*)
              make mrproper
              make include/linux/version.h
              make symlinks
              mkdir -p /dynamic/include &&
              cp -HR include/asm         /dynamic/include &&
              cp -HR include/asm-generic /dynamic/include &&
              cp -HR include/linux       /dynamic/include &&
              touch                      /dynamic/include/linux/autoconf.h
              ;;
          glibc-linuxthreads-*)
              # to ignore
              ;;
          glibc-*)
              tar zxvf /dynamic/src/glibc-linuxthreads-2.3.1.tar.gz
# patch files for glibc 2.3.1 still works for glibc 2.3.2
              patch -Np1 -i /dynamic/src/glibc-2.3.1-root-perl.patch
              patch -Np1 -i /dynamic/src/glibc-2.3.1-libnss.patch
              touch /etc/ld.so.conf
              mkdir ../glibc-build &&
              cd ../glibc-build
                  ../"${base}"/configure --prefix=/dynamic \
                  --disable-profile --enable-add-ons \
                  --libexecdir=/dynamic/bin --with-headers=/dynamic/include
              echo "cross-compiling = no" > configparms
              make
              make install
              make localedata/install-locales

              # we do not create a file /etc/nsswitch.conf as
              # specified in the LFS manual, since this will cause a
              # segmentation in the configure script of binutils. In
              # fact, if we do so, old static binaries compiled with
              # glic-2.2.5 for instance will use the NSS dynamric
              # libraries, which matches glibc-2.3.1.

              # The proper file if any, will be installed when we will
              # rebuild the whole system using sorcery.

              ;;
          binutils*)

              # we failed compiling binutils into /dynamic, even with
              # all the CC options (see top of this file)

              mkdir ../binutils-build &&
              cd ../binutils-build

              # we start sh -x since this avoid a segmentation fault (strange!)

              sh -x ../"${base}"/configure --prefix=/dynamic --enable-shared
              make tooldir=/dynamic
              make tooldir=/dynamic install
              make tooldir=/dynamic install-info
              cp ../"${base}"/include/libiberty.h /dynamic/include
              ;;
          gcc*)
              mkdir ../gcc-build &&
              cd ../gcc-build
              ../"${base}"/configure --prefix=/dynamic --enable-shared \
                  --enable-threads=posix --with-slibdir=/lib \
                  --enable-__cxa_atexit --enable-clocale=gnu \
                  --enable-languages=c,c++ --disable-libgcj
              make bootstrap
              make install-no-fixedincludes
              ln -sf ../usr/bin/cpp /lib &&
              ln -sf ../bin/cpp /usr/lib &&
              ln -sf gcc /usr/bin/cc
              ;;
          findutils*)
              patch -Np1 -i /dynamic/src/findutils-4.1.patch
              patch -Np1 -i /dynamic/src/findutils-4.1-segfault.patch
              ./configure --prefix=/dynamic
              make libexecdir=/dynamic/bin
              make libexecdir=/dynamic/bin install
              ;;
#          gawk*)
# we do not apply the patch, since it is for another gawk version and
# thus failing
#              patch -Np1 -i /dynamic/src/gawk-3.1.1-3.patch
#              ./configure --prefix=/dynamic
#              make
#              make install
#              ;;
          ncurses*)
              # we need a correction since by default only the static library
              # is built
              ./configure --prefix=/dynamic --with-shared
              make
              make install
              ;;
          fileutils*)
              ./configure --prefix=/dynamic --bindir=/bin
              make
              make install
              ln -sf ../../bin/install /dynamic/bin
              ;;
          net-tools*)
              yes "" | make
              make update
              ;;
          perl*)
              ./configure.gnu --prefix=/dynamic
              make
              make install
              ;;
          bin86*)
              make
              make PREFIX=/dynamic install
              ;;
          vim*)
              patch -Np1 -i /dynamic/src/vim-6.1.patch
              ./configure --prefix=/dynamic
              make CPPFLAGS=-DSYS_VIMRC_FILE=\\\"/etc/vimrc\\\"
              make install
              ln -s vim /usr/bin/vi
              ;;
          bash*)
              ./configure --prefix=/dynamic --bindir=/bin
              make
              make install
              ;;
          lockexec*)
              cd lockexec-0.3.1 &&
              make CFLAGS=-static &&
              cp lockexec /bin/
              ;;
          man*)
              patch -Np1 -i ../man-1.5k-manpath.patch
              patch -Np1 -i ../man-1.5k-pager.patch
              patch -Np1 -i ../man-1.5k-80cols.patch
              PATH=$PATH:/usr/bin:/bin \
                  ./configure -default -confdir=/etc
              make
              make install
              ;;
          procinfo*)
              make LDLIBS=-lncurses
              make install
              ;;
          tar*)
              ./configure --prefix=/dynamic --bindir=/bin \
                  --libexecdir=/dynamic/bin
              make
              make install
              ;;
          installwatch*)
              # we need /dynamic/lib/installwatch.so 
              # [see /var/lib/sorcery/modules/libsorcery]
              make PREFIX=/dynamic install
              ;;
          sorcery-stable*)
              cd sorcery &&
              ./install
              ;;
          *)
              ./configure --prefix=/dynamic
              make
              make install
              ;;
      esac
      if [ $? -eq 0 ]; then
          touch "../${file}.install"
      fi
  )
done
