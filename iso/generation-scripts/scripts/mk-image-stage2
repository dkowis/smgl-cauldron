#!/bin/sh

# Author: Benoit PAPILLAULT <benoit.papillault@free.fr>
# Creation: 24/07/2003

# This script compile a basic Linux system which is dynamically linked
# This is inspired from LFS (http://www.linuxfromscratch.org/)

# It uses source archives (tar.gz & tar.bz2) that have been downloaded
# in work/src by mk-download. All compilation will be done under
# work/image-stage2/src and installation should be done in
# work/image-stage2/tmp/tools only.

# This step does not require root access, but read/write access to
# work/image-stage2.

# installation of util-linux requires root access :-(

#
# Warning: when compiling gettext, it will detect any JVM install on your
# machine. At least, it fails to compile with kaffe, blocking on the line
# /bin/sh ../lib/javacomp.sh -d . ./gnu/gettext/GettextResource.java

# define ${files[@]}

while read line;
do
  case "${line}" in
    \#*)
    ;;
  *)
    file=`eval echo "${line}"`
    files[$((i++))]="${file}"
    ;;
  esac
done < files.stage2

# setup compilation option (LFS should be an absolute path)
export TOOLS=/tmp/tools2
export LFS="`pwd`/work/image-stage2"
export LANG=POSIX
export LC_ALL=POSIX
export PATH="${TOOLS}/bin:/bin:/usr/bin"
unset CC CCX CPP LD_LIBRARY_PATH LD_PRELOAD
set +h

# setup destination directories (copy image-stage1 to image-stage2)
if true; then
  rm -rf "${LFS}" &&
  mkdir -p "${LFS}" &&
# copy image-stage1 to image-stage2
  (cd work/image-stage1 ; tar cfl - .) | (cd work/image-stage2; tar xfp -)
  echo "image-stage1 -> image-stage2 transfer done"
fi
rm -rf "${TOOLS}" &&
ln -sf "${LFS}/${TOOLS}" "${TOOLS}" || exit -1

# setup compilation directories
mkdir -p "${LFS}/src" &&
cd "${LFS}/src" || exit -1

# define the appropriate lib directory according to architecture
case `uname -m` in
    x86_64)
	LIB=/lib64
	BI_ARCH=yes
	;;
    *)
	LIB=/lib
	;;
esac

# compiles everything dynamically in /tmp/tools
for file in ${files[@]}
do
  file=`basename "${file}"`
  (
      echo "${file} : extracting..."
      case "${file}" in
          glibc-linuxthreads-*)
              # no need to extract this package
              base="."
              ;;
          *.tar.gz)
              if ! tar zxf "../../src/${file}"; then
                  echo "extracting ${file} failed"
                  exit -1
              fi
              base=`basename "${file}" .tar.gz`
              ;;
          *.tgz)
              if ! tar zxf "../../src/${file}"; then
                  echo "extracting ${file} failed"
                  exit -1
              fi
              base=`basename "${file}" .tgz`
              ;;
          *.tar.bz2)
              if ! tar jxf "../../src/${file}"; then
                  echo "extracting ${file} failed"
                  exit -1
              fi
              base=`basename "${file}" .tar.bz2`
              ;;
          *.patch)
              # nothing need to be done for patch files
              base="."
              ;;
          *)
              echo "don't know how to extract ${file}"
              exit -1
              ;;
      esac
      cd "${base}"
      echo "${file} : compiling in ${base}..."
      case "${file}" in
          *.patch)
              # nothing need to be done for patch files
              ;;
          bash-*)
	      patch -Np1 -i ../../../src/bash-2.05b-2.patch
	      ./configure --prefix="${TOOLS}"
	      make
	      make install
	      ln -s bash "${TOOLS}/bin/sh"
             ;;
          binutils-*) # LFS 5.1 OK
	      rm -rf ../binutils-build
	      mkdir ../binutils-build
	      cd ../binutils-build
# LIB_PATH is the directory used to find the dynamic linker installed by
# glibc in stage2. It must contains path for 32 bits and 64 bits linker.
	      LIB_PATH="${TOOLS}/${LIB}"
	      if [ "${BI_ARCH}" = "yes" ]; then
		  LIB_PATH="${LIB_PATH}:${TOOLS}/lib"
	      fi
	      "../${base}/configure" --prefix="${TOOLS}" \
		  --libdir="${TOOLS}/${LIB}" \
		  --enable-shared --with-lib-path="${LIB_PATH}"
	      make
	      make install
              ;;
          bzip2-*)
              make PREFIX="${TOOLS}" install
              ;;
	  coreutils-*)
	      DEFAULT_POSIX2_VERSION=199209 ./configure --prefix="${TOOLS}"
	      make
	      make install
	      ;;
# gawk use the default ./configure; make; make install defined later
          gcc-*) # LFS 5.1 OK
	      patch -Np1 -i ../../../src/gcc-3.3.3-no_fixincludes-1.patch
	      sed "s@/tools@${TOOLS}@g" \
		  ../../../src/gcc-3.3.3-specs-1.patch | patch -p1
	      rm -rf ../gcc-build
	      mkdir ../gcc-build
              cd ../gcc-build
	      "../${base}/configure" --prefix="${TOOLS}" \
		  --libdir="${TOOLS}/${LIB}" --with-local-prefix="${TOOLS}" \
		  --enable-clocale=gnu --enable-shared \
		  --enable-threads=posix --enable-__cxa_atexit \
		  --enable-languages=c,c++
	      make
	      make install
              ;;
          glibc-linuxthreads-*)
              # to ignore
              ;;
	  glibc-*) # LFS 5.1 OK
	      tar zxf ../../../src/glibc-linuxthreads-2.3.2.tar.gz
	      patch -Np1 -i ../../../src/glibc-2.3.2-sscanf-1.patch
# on bi-arch platform, we compile in 32 bits mode first
if [ "`uname -m`" = "x86_64" ]; then
	      mkdir ../glibc-build-32
	      cd ../glibc-build-32
	      CC="gcc -m32" "../${base}/configure" --prefix="${TOOLS}" \
		  --disable-profile --enable-add-ons=linuxthreads \
		  --with-binutils="${TOOLS}/bin" \
		  --with-headers="${TOOLS}/include" \
		  --without-gd --without-cvs --with-tls --without-__thread \
		  i686-pc-linux-gnu
	      make
	      mkdir -p "${TOOLS}/etc"
	      touch "${TOOLS}/etc/ld.so.conf"
	      make install
fi
# native compilation
	      mkdir ../glibc-build
# --with-tls is needed to later compile perl in stage3
# --without-__thread is needed since --with-tls alone does not work
	      cd ../glibc-build
#since LIB will be evaluated by glibc later, we need to export this
#variable too
	      export LIB
	      cat > configparms <<EOF
slibdir=\$(TOOLS)/\$(LIB)
EOF
	      "../${base}/configure" --prefix="${TOOLS}" \
		  --libdir="${TOOLS}/${LIB}" \
		  --disable-profile --enable-add-ons=linuxthreads \
		  --with-binutils="${TOOLS}/bin" \
		  --with-headers="${TOOLS}/include" \
		  --without-gd --without-cvs --with-tls --without-__thread
	      make
	      mkdir -p "${TOOLS}/etc"
	      touch "${TOOLS}/etc/ld.so.conf"
	      make install
	      make localedata/install-locales
# Adjusting the toolchain
	      cd ../binutils-build
	      make -C ld install
	      SPECFILE=`find "${TOOLS}/${LIB}/gcc-lib" -name specs` &&
	      grep :-dynamic-linker "${SPECFILE}"
	      sed -e "s@:-dynamic-linker @:-dynamic-linker ${TOOLS}@g" \
		  "${SPECFILE}" > tempspecfile &&
	      mv -f tempspecfile "${SPECFILE}" &&
	      grep :-dynamic-linker "${SPECFILE}"
	      unset SPECFILE
	      rm -f "${TOOLS}/${LIB}"/gcc-lib/*/*/include/{pthread.h,bits/sigthread.h}
	      ;;
          grep-*)
	      ./configure --prefix="${TOOLS}" \
		  --disable-perl-regexp --with-included-regex
              make
	      make install
              ;;
# gzip follow the default ./configure; make; make install
		  net-tools-*)
			  yes "" | ./configure.sh config.in
			  make
			  make BASEDIR="${TOOLS}" install
			  ;;
	  ncurses-*)
	      ./configure --prefix="${TOOLS}" --libdir="${TOOLS}/${LIB}" \
		  --with-shared \
		  --without-debug --without-ada --enable-overwrite
	      make
	      make install
	      ;;
	  patch-*)
	      CPPFLAGS=-D_GNU_SOURCE ./configure --prefix="${TOOLS}" \
		  --libdir="${TOOLS}/${LIB}"
	      make
	      make install
	      ;;
	  perl-*)
	      patch -Np1 -i ../../../src/perl-5.8.4-libc-1.patch
	      echo "uname -m" > "${TOOLS}/bin/arch"
	      chmod 755 "${TOOLS}/bin/arch"
	      ./configure.gnu --prefix="${TOOLS}" --libdir="${TOOLS}/${LIB}" \
		  -Dstatic_ext='IO Fcntl POSIX'
	      make perl utilities
	      cp perl pod/pod2man "${TOOLS}/bin"
	      mkdir -p "${TOOLS}/lib/perl5/5.8.4"
	      cp -R lib/* "${TOOLS}/lib/perl5/5.8.4"
	      ;;
          util-linux*)
# added renice which is needed for sorcery
# we should add column which is needed for sorcery
	      cp configure configure.backup
	      sed "s@/usr/include@${TOOLS}/include@g" configure.backup > configure
	      ./configure
	      make -C lib
	      make -C mount mount umount
		  make -C sys-utils renice
	      make -C text-utils more column
	      cp mount/{,u}mount text-utils/more text-utils/column \
			  sys-utils/renice "${TOOLS}/bin"
              ;;
          *)
              ./configure --prefix="${TOOLS}" --libdir="${TOOLS}/${LIB}"
              make
	      make install
              ;;
      esac
      if [ $? -eq 0 ]; then
          touch "../${file}.install"
      fi
  )
  echo "${file} : done."
  echo "checking..."
# check that the native compiler works
  echo 'int main() { printf("coucou\n"); }' > main.c
  gcc -o main main.c
  readelf -l main | grep interpreter
  if ! readelf -l main | grep -q "${TOOLS}" ; then
    echo "*** CHECK FAILED ***"
  fi
  if [ "`./main`" != "coucou" ]; then
    echo "*** RUNNING CHECK FAILED ***"
    exit
  fi
# on bi-arch architecture, check that the 32 bits compiler works
# note: the -m32 flag has been tested only on x86_64
  if [ "${BI_ARCH}" = "yes" ]; then
      echo 'int main() { printf("coucou\n"); }' > main.c
      gcc -m32 -o main main.c
      readelf -l main | grep interpreter
      if ! readelf -l main | grep -q "${TOOLS}" ; then
	  echo "*** CHECK SUB-ARCH FAILED ***"
      fi
      if [ "`./main`" != "coucou" ]; then
	  echo "*** RUNNING CHECK SUB-ARCH FAILED ***"
	  exit
      fi
  fi
done

