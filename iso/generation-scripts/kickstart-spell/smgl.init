#!/bin/bash


PATH=/bin:/usr/bin:/sbin:/usr/sbin

mount -n -t proc none /proc 

shell() {

  echo  "Press CTRL-D or type exit to return"
  /bin/sh

}

show_modules()  {

    for ITEM in "$1"/*; do
        if [[ "$ITEM" != modules.* ]]
        then echo `basename "${ITEM}"`
             if [ -d "${ITEM}" ]
             then echo "Directory "
             else echo "Module "
             fi
        fi
    done
}

input_module_parameters()  {

  HELP="Optionally, enter module parameters"
  $DIALOG  --nocancel  \
           --inputbox  \
           "$HELP"     \
            0 0
}

# returns true (0) if a module has been loaded or false (-1)
load_module()  {

    if [ ! -z "$1" ]
    then  TITLE="Module Menu"
           HELP="Select a module to load please"
         MODULE=""

        while true;
        do MODULES=`show_modules  "$1"`
           MODULE=`$DIALOG  --title  "$TITLE"  \
                            --menu             \
                            "$HELP"            \
                            0 0 0              \
                            $MODULES`

# if the user hit the <Cancel> button, we return false
           if [ -z "${MODULE}" ]
	   then return -1;
           fi
# if the user select a directory, we display a new menu
           if [ -d "$1/${MODULE}" ]
	   then if load_module "$1/${MODULE}"
	        then return
                fi
# else if the user select a file, we load that module
           elif [ -f "$1/${MODULE}" ]
	   then MODULE=`basename "${MODULE}" .ko`    &&
                PARAMETERS=`input_module_parameters` &&
               if modprobe "${MODULE}" $PARAMETERS
	       then sleep 2 &&
                    return 0;
               fi
# wait 10 seconds with the modprobe's error displayed and
# redisplay the same menu again (hence, no return statement)
               sleep 2
           fi
        done

    else load_module "/lib/modules/${KERNEL}/"
    fi
}

# look through all the cdroms for the boot cd

mountBootDev()
{
for bootdev in $* ; do
	/bin/mount -n -r -t iso9660 /dev/$bootdev $MOUNT 2> /dev/null
	if [ -e "$ID" ]; then
		SMGL_CD=/dev/$bootdev
                /bin/umount  -n  $MOUNT  2>/dev/null
		break
	else
		/bin/umount -n $MOUNT 2>/dev/null
	fi
done

}


scan_cdroms()  {
if  [  -z  "$SMGL_CD"  ]; then 
 # look through all the ide devices for cdroms.
 for idedev in `cd /proc/ide; echo hd?| tr ' ' '\n'`
 do /usr/bin/grep cdrom /proc/ide/$idedev/media > /dev/null && cddev="$cddev $idedev"
 done
 cddev="$cddev "`cd /dev; echo scd*`
 cddev="$cddev "`cd /dev; echo sr*`
 cddev="$cddev "`cd /dev; echo cdroms/*`
 cddev="$cddev "`cd /dev; echo ubd*`
 cddev=`echo $cddev | tr ' ' '\n'`

 mountBootDev $cddev

fi

}

show_filesystems()  {

  for FILESYSTEM in `/bin/cat  /proc/filesystems  | /usr/bin/grep  -v  nodev`
  do echo  "$FILESYSTEM"
     echo  "filesystem "
  done

}


select_root()  {

  FILESYSTEMS=`show_filesystems`                     &&

     ROOT=`$DIALOG  --inputbox                       \
                    "Please enter the root device."  \
                    10 60                            \
                    $SMGL_CD`                        &&

  VFSTYPE=`$DIALOG  --nocancel                       \
                    --menu                           \
                    "Please select a file system."   \
                    0 0 0                            \
                    $FILESYSTEMS`                    &&

  OPTIONS=`$DIALOG  --nocancel                       \
                    --inputbox                       \
                    "Please enter mounting options"  \
                     10 60                           \
                     "defaults,ro"`

}

main_menu()  {
    
    while true
    do

      M_HELP="Select modules to load"
      S_HELP="Shell out for a moment"
      R_HELP="Choose the device to be mounted as /"
      D_HELP="Continue the normal boot process"
      
     scan_cdroms
      
      if  [ -z "$SMGL_CD" ] && [ -z "$ROOT" ]
      then HELP="Load the correct low level SCSI driver kernel module to be able to detect and read the SCSI CDROM."
           DEFAULT_ITEM="M"

      elif  [ -n "$SMGL_CD" ]
      then HELP="The Source Mage GNU/Linux Install/Rescue CDROM is detected on $SMGL_CD"
           DEFAULT_ITEM="D"

      else HELP="You have selected to mount $ROOT as the root file system."
           DEFAULT_ITEM="D"

      fi

      COMMAND=`$DIALOG  --title  "Initrd Menu"                \
                        --nocancel                            \
                        --item-help                           \
                        --default-item  "$DEFAULT_ITEM"       \
                        --menu                                \
                        "$HELP"                               \
                        0 0 0                                 \
                        "M"  "Load modules "       "$M_HELP"  \
                        "S"  "Shell "              "$S_HELP"  \
                        "R"  "Choose root device (For rescue mode) " "$R_HELP"  \
                        "D"  "Continue booting "   "$D_HELP"`  

      case  $COMMAND  in
          M)  load_module  ;;
          S)  shell        ;;
          R)  select_root  ;;
          D)  return       ;;
      esac

    done
}


main()  {

  main_menu

  if    [  -z  "$ROOT"    ] && [  -z  "$SMGL_CD"  ]
  then $DIALOG  --msgbox  \
             "Unable to boot without a root."  0 0
        main  $*
  fi

  [  -n  "$ROOT"     ]  ||     ROOT=$SMGL_CD
  [  -n  "$VFSTYPE"  ]  ||  VFSTYPE=iso9660
  [  -n  "$OPTIONS"  ]  ||  OPTIONS="defaults,ro"

  if /bin/mount -t $VFSTYPE -o $OPTIONS $ROOT $MOUNT && [ -x $MOUNT/sbin/init ]
  then cd  $MOUNT 
      ## setup writable /etc /root and nfs stat dir if ISO is ROOT
       if [ "$ROOT" = "$SMGL_CD" ]
       then /bin/mount -t $VFSTYPE -o $OPTIONS $ROOT $MOUNT/mnt/cdrom
            for i in etc root
            do echo "Setting up writable /$i for install"
               /bin/mount -t tmpfs tmpfs $MOUNT/$i
               $MOUNT/bin/cp -a $MOUNT/mnt/cdrom/$i $MOUNT
            done
            echo "Setting up writable /var/log for install"
	    /bin/mount -t tmpfs tmpfs $MOUNT/var/log/
	    $MOUNT/bin/cp -a $MOUNT/mnt/cdrom/var/log/* $MOUNT/var/log/
            echo "Setting up writable /var/lib/nfs for install"
	    /bin/mount -t tmpfs tmpfs $MOUNT/var/lib/nfs
	    $MOUNT/bin/cp -a $MOUNT/mnt/cdrom/var/lib/nfs $MOUNT/var/lib/
	    /bin/umount $MOUNT/mnt/cdrom
       fi
      ## unmount /proc and then pivot_root
       /bin/umount /proc
       if  [  -d  initrd  ]
       then /sbin/pivot_root  .  initrd
       else /sbin/pivot_root  .  mnt
       fi
       touch /etc/mtab
       if [[ "$KERNEL" == 2.4* ]]
       then echo "Remounting devfs to /dev"
            mount -t devfs devfs /dev
            mknod /dev/initctl p
       else echo "Booting with static /dev"
       fi
       exec  /sbin/init  $*

  else  $DIALOG  --msgbox                                 \
                 "Unable to locate /sbin/init on $ROOT."  \
                  0 0
         /bin/umount  $MOUNT
         main  $*
  fi

}


export  IFS="	
"
DIALOG="/usr/bin/dialog
--backtitle
Source Mage GNU/Linux initrd
--stdout"


KERNEL=`/bin/uname -r`
DEVICE="/dev/cdroms/cdrom"
 MOUNT="/mnt/cdrom"
    ID="$MOUNT/boot/isolinux/smage.cd"

main  $*
