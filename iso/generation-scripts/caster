#!/bin/bash
# This script wraps around cast. It tries to be a little "smarter"
# to ensure we get good cache tarballs. Technically, we should be
# able to use cast instead, but this does nice stuff like prevent
# optional dependencies from automatically turning themselves on.


# This function is called before every cast. It is commonly used for
# spell-specific workarounds.
function pre_workaround()
{

  case $1 in
    # this attempts to make the linux build use the settings we want
    # for the ISO kernel.
    "linux")
      cp $STATE_DIR/linux.p $DEPENDS_CONFIG/linux.p
      cp $STATE_DIR/config-$KVERSION /etc/sorcery/local/kernel.config
      rm -f /usr/src/linux-*/.spell-config.p
      ;;

    # This directory is protected by sorcery, and thus won't be reaped
    # automatically. However, we'll want openssh to install all its
    # /etc files, as otherwise e.g. sshd.conf is missing from the tarball.
    "openssh")
      rm -rf /etc/ssh
      ;;
  esac

  true
}

# If neccessary, undo changes from pre_workaround here, or do other funky stuff
function post_workaround()
{
  true
}

# ---- execution of script starts here ----

if [ "$1" == "-c" ] ;then
  RECAST="-c"
  shift
fi

# Make sure dirs we need actually exist
mkdir -p /tmp

# Load sorcery and our config
. /etc/sorcery/config
. ${0%/*}/config

# make sure we actually have a list of spells to keep,
# or things will go horribly boom.
if ! [ -e $STATE_DIR/list.reqd ] ;then
  ${0%/*}/listparse
fi

# Some report files for fancy spell listings
SUCCESS_LIST=/tmp/spell.success.$$
FAIL_LIST=/tmp/spell.fail.$$
CHANGE_LIST=/tmp/spell.change.$$
rm -f $SUCCESS_LIST $FAIL_LIST $CHANGE_LIST

# Main loop, cast each spell from the command line
for spell in "$@" ; do

  # grab everything we need to know about the spell from sorcery
  codex_set_current_spell_by_name $spell
  cachefile=${INSTALL_CACHE}/${SPELL}-${VERSION}-${HOST}.tar${EXTENSION}

  # Generate a new tarball if we don't have one yet, have -c specified,
  # or have an outdated one
  if ! test -e $cachefile || [ $RECAST ] ;then

    # Do hacks needed to get this thing to work
    pre_workaround $spell

    # Cast all spells needed to cast $spell, but NOT $spell itself
    # (this allows cast to extract caches for those spells )
    cast --deps $spell

    # Remove caches, so we notice if ARCHIVE=off
    rm -f $cachefile

    # Compile the spell itself
    cast -c $spell

    rc=$?
    # Do post_workaround, no matter what happened
    post_workaround $spell

    # Test if we did not get a cache file
    if ! test -e $cachefile ;then

      # If the cast was successful, and there is an install log,
      # we'll just make the tarball ourselves (ARCHIVE=off)
      if [[ $rc == 0 ]] && gaze install $spell >/dev/null ;then
        message "Forcing generation of cache"
        pushd / >/dev/null
          # This mimicks sorcery's current behavior of making caches.
          gaze install-full $spell | sed 's:^/::' |
            tar --no-recursion -cjPf $cachefile -T -
        popd >/dev/null
      fi
    fi

    if [[ $rc == 0 ]] ;then
      # Yay, everything went sweet
      echo "$SPELL" >>$SUCCESS_LIST
    else
      echo "$SPELL" >>$FAIL_LIST
    fi ||
      # hmm... we just cast a spell, but gaze install $spell fails... strange.
      echo "$SPELL" >>$FAIL_LIST

    # Now, we finished what we came here for (casting one spell).
    # We clean up after ourselves and dispel all spells not strictly needed,
    # so the next spell gets a clean environment.

    # This little thingy grabs all installed spells, compares them against
    # the 'minimum' spells that actually should stay around all the time,
    # and gives us all the "superfluous" spells that aren't needed.
    SUP_SPELLS=$(
     { cat /var/state/sorcery/packages | cut -d: -f1
       cat $STATE_DIR/list.reqd $STATE_DIR/list.reqd ; } |
       sort | uniq -u)

    # Quick sanity check: If we're supposed to dispel more than 10 spells,
    # something is very probably very wrong. Bail.
    if [ $( echo "$SUP_SPELLS" | wc -l ) -gt 10 ] ;then
      message "${QUERY_COLOR}Whoops! Cleanup wants me to dispel the following\
spells:${DEFAULT_COLOR}${SPELL_COLOR}"
      echo "$SUP_SPELLS" |column
      message -n "$DEFAULT_COLOR"
      if query "Continue anyway?" n ;then
        exit 3
      fi
    fi

    # If we have spells to dispel, do so.
    # Leave the /var/state/sorcery/depends entries around, though.
    # We'll need them for dependency management on the ISO.
    if [ -n "$SUP_SPELLS" ] ;then
      dispel --no-reap-depends $SUP_SPELLS
    fi
  fi
done

# Print pretty cleanse --fix like result
if [ -s $SUCCESS_LIST ] ;then
  message "${MESSAGE_COLOR}Spells installed successfully:"
  message "------------------------------${SPELL_COLOR}"
  column $SUCCESS_LIST
  message "$DEFAULT_COLOR"
fi
if [ -s $CHANGE_LIST ] ;then
  message "${MESSAGE_COLOR}Spells whose install log changed:"
  message "------------------------------${QUERY_COLOR}"
  column $CHANGE_LIST
  message "$DEFAULT_COLOR"
fi
if [ -s $FAIL_LIST ] ;then
  message "${MESSAGE_COLOR}Spells that failed to cast:"
  message "------------------------------${PROBLEM_COLOR}"
  column $FAIL_LIST
  message "$DEFAULT_COLOR"
fi

rm -f $SUCCESS_LIST $FAIL_LIST $CHANGE_LIST
