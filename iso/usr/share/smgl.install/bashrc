#!/bin/bash

# This file is the SMGL installer, at least for now.
# Take care not to pollute the user's namespace too much,
# And make sure your functions don't collide with existing commands

INSTALLER_TMP=/tmp/smgl.install
INSTALLER_STATUS=$INSTALLER_TMP/status
INSTALLER_DATA=/usr/share/smgl.install
INSTALLER_DOCS=/usr/share/doc/smgl.install

# This will race on startup, but it shouldn't harm anyone. I hope.
mkdir -p $INSTALLER_TMP
[[ -e $INSTALLER_STATUS ]] || echo 'init' >$INSTALLER_STATUS

function header() {
  echo ""
  echo ""
  echo "<-------------------------------------------------------------------->"
}

function todo() {
  local CURSTEP="${1:-$(cat $INSTALLER_STATUS)}"
  header
  cat $INSTALLER_DOCS/steps/$CURSTEP
}

function next_step() {
  local CURSTEP
  # get old status
  CURSTEP=$(cat $INSTALLER_STATUS)
  # find next status
  CURSTEP=$(grep "^$CURSTEP:" $INSTALLER_DATA/order | head -n 1 | cut -d: -f2)
  # check if next status is a branch
  [[ ${CURSTEP} == *'|'* ]] && CURSTEP="error"
  # if we couldn't find a next status, jump to 'error'
  CURSTEP=${CURSTEP:-error}
  # print out new status
  echo "$CURSTEP"
}

function cur_step() {
  cat $INSTALLER_STATUS
}

function next() {
  local CURSTEP
  # get old status
  CURSTEP=$(cat $INSTALLER_STATUS)
  # find next status
  CURSTEP=$(grep "^$CURSTEP:" $INSTALLER_DATA/order | head -n 1 | cut -d: -f2)
  # if we couldn't find a next status, jump to 'error'
  CURSTEP=${CURSTEP:-error}
  # save new status
  echo "$CURSTEP" >$INSTALLER_STATUS
  # print new message
  todo
}

function prev() {
  local CURSTEP
  CURSTEP=$(cat $INSTALLER_STATUS)
  CURSTEP=$(grep ":$CURSTEP$" $INSTALLER_DATA/order | tail -n 1 | cut -d: -f1)
  CURSTEP=${CURSTEP:-error}
  echo "$CURSTEP" >$INSTALLER_STATUS
  todo
}

function num_current() {
  local CURSTEP
  CURSTEP=$(cat $INSTALLER_STATUS)
  grep -n "$CURSTEP" $INSTALLER_DATA/steps | cut -d: -f1
}

function num_steps() {
  cat $INSTALLER_DATA/steps | wc -l
}

function steps() {
  header
  cat $INSTALLER_DATA/steps
}

function jump() {
  cat $INSTALLER_DATA/steps | cut -d" " -f1 |
  grep -q "^$*" && {
    echo "$*" >$INSTALLER_STATUS
    todo
    return 0
  }
  header
  echo "Error: '$*' is not a recognized step."
  echo "Type [1msteps[m to see a list of steps."
  return 1
}

function welcome() {
  header
  cat $INSTALLER_DOCS/welcome
}

function help() {
  helpfile=$INSTALLER_DOCS/help/${1:-index}
  if [[ -e $helpfile ]] ;then
    header
    cat $helpfile
  else
    echo "No installer help for '$1', falling back to bash's builtin help"
    builtin help $1
  fi
}

PS1="[current:\$(cur_step) next:\$(next_step) \$(num_current)/\$(num_steps)] For a list of commands, type [1mhelp[m\n\u \w\$ "
