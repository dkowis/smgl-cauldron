#!/bin/bash

# This file is the SMGL installer, at least for now.
# Take care not to pollute the user's namespace too much,
# And make sure your functions don't collide with existing commands

INSTALLER_TMP=/tmp/smgl.install
INSTALLER_STATUS=$INSTALLER_TMP/status
INSTALLER_DATA=/usr/share/smgl.install
INSTALLER_DOCS=/usr/share/doc/smgl.install

# This will race on startup, but it shouldn't harm anyone. I hope.
mkdir -p $INSTALLER_TMP
[[ -e $INSTALLER_STATUS ]] || echo 'init' >$INSTALLER_STATUS

function header() {
  local doc
  doc=$1
  echo ""
  echo ""
  echo ""
  cat $1
}

function todo() {
  local CURSTEP
  CURSTEP=$(cat $INSTALLER_STATUS)
  header $INSTALLER_DOCS/steps/$CURSTEP
}

function next_step() {
  local CURSTEP
  # get old status
  CURSTEP=$(cat $INSTALLER_STATUS)
  # find next status
  CURSTEP=$(grep "^$CURSTEP:" $INSTALLER_DATA/order | head -n 1 | cut -d: -f2)
  # check if next status is a branch
  [[ ${CURSTEP} == *'|'* ]] && CURSTEP="error"
  # if we couldn't find a next status, jump to 'error'
  CURSTEP=${CURSTEP:-error}
  # print out new status
  echo "$CURSTEP"
}

function cur_step() {
  cat $INSTALLER_STATUS
}

function next() {
  local CURSTEP
  # get old status
  CURSTEP=$(cat $INSTALLER_STATUS)
  # find next status
  CURSTEP=$(grep "^$CURSTEP:" $INSTALLER_DATA/order | head -n 1 | cut -d: -f2)
  # check if next status is a branch
  [[ ${CURSTEP} == *'|'* ]] && CURSTEP="error"
  # if we couldn't find a next status, jump to 'error'
  CURSTEP=${CURSTEP:-error}
  # save new status
  echo "$CURSTEP" >$INSTALLER_STATUS
  # print new message
  todo
}

function back() {
  local CURSTEP
  CURSTEP=$(cat $INSTALLER_STATUS)
  if [[ $CURSTEP != "init" ]] ;then
    CURSTEP=$(grep ":$CURSTEP$" $INSTALLER_DATA/order | head -n 1 | cut -d: -f1)
  fi
  CURSTEP=${CURSTEP:-error}
  echo "$CURSTEP" >$INSTALLER_STATUS
  todo
}

function num_current() {
  local CURSTEP
  CURSTEP=$(cat $INSTALLER_STATUS)
  grep -n "$CURSTEP" $INSTALLER_DATA/steps | cut -d: -f1
}

function num_steps() {
  cat $INSTALLER_DATA/steps | wc -l
}

function steps() {
  header $INSTALLER_DATA/steps
}

function jump() {
  local i
  local good=0

  for i in $(cat $INSTALLER_DATA/steps | cut -d" " -f1)
  do
    if [[ $* = $i ]]
    then
      good=1
      echo "$*" >$INSTALLER_STATUS
      break
    fi
  done
  if [[ $good = 0 ]]
  then
    echo ""
    echo "Error: '$*' is not a recognized step."
    echo "Type [1msteps[m to see a list of steps."
  fi
}

function welcome() {
  header $INSTALLER_DOCS/welcome
}

function help() {
  header $INSTALLER_DATA/commands
}

PS1="[current:\$(cur_step) next:\$(next_step) \$(num_current)/\$(num_steps)] For a list of commands, type [1mhelp[m\n\u \w\$ "
