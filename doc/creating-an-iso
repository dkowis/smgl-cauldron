Making an iso quickly, very-brief notes
These should be extended.

1. grab a chroot tarball

2. unpack, chroot in, cast linux (call this chroot iso-chroot)
 * mount --bind /dev dev
 * mount --bind /dev/pts dev/pts
 * mount --bind /proc proc
 ! Do not forget to build in initrd support!!!

3. clean up a bit (rm linux source tree, binary cache, linux source)
 * rm /var/spool/sorcery/*
 * rm /var/cache/sorcery/*
 * rm /usr/src/linux* -rf

4. copy the contents of the "base" dir into the chroot
   (this dir contains stuff like etc/shadow, make sure those files actually
   end up as /etc/shadow in your chroot, and not as /base/etc/shadow)

5. copy the chroot (one copy for the iso, one the system the user will install) (call second chroot system-chroot)
 * umount dev/pts dev proc

5a. copy the contents of the "iso" dir into the iso-chroot

6. sanitize sorcery in system chroot - set prompt delay, and others to default

7. tar up system-chroot and copy it into iso-chroot

7.5 Chroot back into iso-chroot to create the initrd
 * be sure to set the appropriate kernel version in the mkinitrd script
 * Also hard-code the path into the mkinitrd script otherwise things don't work...

8. run ./scripts/mkinitrd to create an initrd.gz
 * Host machine needs loopback support

9. copy that into iso-chroot/boot/

A. make sure iso-chroot/isolinux/isolinux.cfg contains the right name for the
   kernel image and the right (uncompressed) initrd size
 * If using static dev, run MAKEDEV generic in the chroot's /dev/ also telinit bootdisable coldplug and udevd
 * If using udev, change the chroot's /etc/sysconfig/devices file to say DEVICES=udev

B. create an iso from your iso-chroot, for example:
mkisofs -quiet -R -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o smgl-0.0.0.iso iso-chroot
