This file describes the layout of the project, and how the different components
interconnect with each other.

^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
cauldron/

	Code for cauldron, the ISO generation script(s).

********
* bin/ *
********
	This directory hosts any end-user executable scripts. Currently this is
only meant for the main front-end, cauldron, described below.

****************
* bin/cauldron *
****************
	This is the front-end interface to all the different libraries. It
accepts user input, and (when later implemented) presents an interface for
modifying the cauldron config file. It will have both a command-line interface
and a menu-driven interface (via dialog), much like sorcery.


********
* lib/ *
********
	This directory hosts all the back-end code, logically separated
according to function and purpose. This is where the real work in generating an
ISO is carried out.

*******************
* lib/libcauldron *
*******************
	This is the main cauldron library. It is responsible for managing
initialization and final cleanup and for providing functionality common to all
the cauldron sub-libraries.

******************
* lib/lib.chroot *
******************
	The lib.chroot library is responsible for setting up, tearing down, and
calling into chroots. The code in this module gets used many times both in the
other modules (in particular libcauldron) and in cauldron itself (particularly
for the brew command).

****************
* lib/lib.init *
****************
	The lib.init library handles the init system for the ISO. It provides
functions for creating an initramfs/initrd and for setting up the ISO inittab
for booting into the correct enchant setup (i.e. putting the menu installer on
tty1 and the shell installer on all the remaining tty's). It will also set up
other necessary init scripts (and possibly the init system itself, if this is
needed), though these should really be taken care of via sorcery and casting
spells with their init scripts enabled.

*********************
* lib/lib.sorcerous *
*********************
	The lib.sorcerous library provides an interface to sorcery components
and functions as they are needed within cauldron. This includes functions which
source sorcery files in the target, as well as functions to download and
install sorcery into the target.

*********************
* lib/lib.toolchain *
*********************
	The lib.toolchain library provides functions for generating the base
toolchain used to build all the components that will make up the final ISO.


******************
* lib/errorcodes *
******************
	Defines the cauldron-specific error codes and corresponding messages to
be used for error-checking via liberror functions.


*********
* data/ *
*********
	Everything in this directory consists of necessary auxiliary files. At
present, this includes configuration files as well as the "cleaners" (files
that list paths to prune from generated content).

******************
* data/cleaners/ *
******************
	This directory contains text files that list files to be removed from
the final ISO, one file per line (note: files, not spells!). For example, the
build toolchain is removed from the ISO before it is packaged, but it is not
simply dispelled. Instead, it is removed via the cleaners, since some of the
toolchain libraries are needed for runtime binaries (such as libstdc++), even
though the build tools themselves are not. No build tools should be on the ISO!
Their spell caches are provided instead, and they are to be accessed from the
installed platform.


****************
* data/config/ *
****************
	This directory contains all the default configuration variables and
values used by cauldron.

****************************
* data/config/default.conf *
****************************
	This is the default configuration profile. It does nothing than to
source all the other configuration files in the correct order.

*********************
* data/config/arch/ *
*********************
	This directory contains the different architecture definitions needed
by cauldron.


********
* etc/ *
********
	This directory contains the end-user configurable files. These files
consist of the main cauldron.conf file that specifies all of cauldron's
configuration, as well as architecture specific spell listing and configuration
files (such as the iso and sys spell/cache/source lists, and the files that
specify what will go into the initramfs and how busybox will be configured for
the initramfs).

*********************
* etc/cauldron.conf *
*********************
	This config file is the default configuration that is installed with
cauldron. It sets the CAULDRON_CONF variable to point to the location of the
cauldron default configuration files and sources the default configuration
profile (config/default.conf). It can be highly customized, where any config
file that is loaded by the default profile can be loaded directly, skipped,
etc., and all config variables defined can be overridden after they are loaded
by simply redefining them.

************************
* etc/$ARCH/iso.spells *
************************
	A list of all the spells necessary for the ISO runtime to function.
This includes all spells the ISO needs, including basesystem-level spells
through higher-level recovery tools, as well as any optional tools that are
wanted.

************************
* etc/$ARCH/iso.caches *
************************
	Spell caches provided for installation. These are all in addition to
the system.tar.bz2 basesystem provided in the ISO. These are all optional
packages, in the sense that whether they are required for a system to function
depends on the configuration of the system (i.e., a root filesystem formatted
with XFS will require xfsprogs in order to be able to boot). These are spells
that can readily be provided as caches, meaning they do not have selectable
options during compile time (aside from the usual architecture and path
options). Any provided spell caches should also have their sources provided
(see below), so long as doing so does not overly enlarge the ISO (this proviso
may be dropped in the future depending on source collection sizes).

*************************
* etc/$ARCH/iso.sources *
*************************
	Spell sources provided for installation. Sources are provided for two
reasons: 1) the spell in question is truly optional (not strictly needed for a
system to function); 2) the spell in question is actually needed for a typical
system to function (i.e., a bootloader), but the spell has compilation options
that mean the spell cannot be provided simply as a cache and still satisfy the
needs of all potential users. Exclusion of a spell from this list does not
necessarily imply exclusion of the spell's sources from the ISO (cf. iso.caches
above).

************************
* etc/$ARCH/sys.spells *
************************
	A list of all the spells necessary for an installed target system to
function initially. This should be kept as minimal as possible, and typically
consists purely of a build toolchain and a shell. Of course any auxiliary
spells necessary for sorcery are also included.

*************************
* etc/$ARCH/sys.sources *
*************************
	A list of all the spell sources necessary for an installed target
system to function initially. Currently this consists only of the linux
sources.

***********************
* etc/$ARCH/toolchain *
***********************
	This is a list of all the spells needed for building the binaries to go
onto the ISO. It should be kept absolutely minimal, providing only what is
absolutely necessary to compile sources for the given architecture (i.e.,
things like gcc, binutils, and glibc, and possibly any architecture-specific
build spells).

*********************
* etc/$ARCH/initfs/ *
*********************
	This directory contains configuration files and listing files for the
content that is to populate a generated initramfs/initramdisk for the given
architecture. This includes, for example, the busybox configuration.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
lib/

	Code common to both cauldron and enchantment.

************
* libcolor *
************
	This library defines all the color codes and message type definitions
to be used by the cauldron and enchantment scripts, and functions to handle
setting the colors for the needed message types.

************
* liberror *
************
	This library defines all the error codes recognized by the cauldron
and enchantment scripts, and functions to handle the printing of error messages
using these codes. This is used by all the other scripts in the project.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
enchantment/

	Code for enchantment, the installer interface(s) used on the ISOs.

********
* lib/ *
********
	This directory hosts all the back-end code, logically separated
according to function and purpose. This is where the real work in processing an
install is carried out.

**********************
* lib/libenchantment *
**********************
	This library provides common functions to be used across the different
ISO installers. Currently sourced by libcauldron, but likely will be sourced by
cauldron instead of libcauldron soon. It is also sourced by the different
installers, as it provides common functionality for them.

******************
* lib/lib.chroot *
******************
	This library provides functions for preparing, entering, executing
within, exiting, and cleaning up chroots.

****************
* lib/lib.i18n *
****************
	This library provides functionality for internationalization. This
currently consists of setting up keymaps, but in the future will include
locale, display terminal (such as fbterm), input method loading (such as uim
and m17n-lib), etc.

*******************
* lib/lib.install *
*******************
	This is perhaps the library most associated with the purpose of
enchantment: installing files, directories, caches, etc. into a target. No file
should be directly copied/installed to a target by any enchantment code except
in this library.

*******************
* lib/lib.modules *
*******************
	Enchantment has the ability to have very complicated install
procedures. This library is responsible for managing access/interfacing to each
of the procedures, called modules.

******************
* lib/lib.potion *
******************
	This library provides state tracking functionality for enchantment. The
state tracking can be used for error-proofing installation procedures,
automating installs (or even portions of them, as it can function over ranges
of modules), and undo functionality if the functions are linked with the
history functionality provided by libenchantment. This library is sourced by
libenchantment.


******************
* lib/errorcodes *
******************
	Defines the enchantment-specific error codes and corresponding messages to
be used for error-checking via liberror functions.


*********
* menu/ *
*********
	The menu installer (look at older ISOs (0.9.6.3 or earlier) for an idea
of what this is). Everything relevant to the menu installer goes under this
directory, to be copied onto the ISO later if the ISO is intended to make use
of this module.

**********
* shell/ *
**********
	The shell installer (as seen on the 0.10.0 ISOs). Everything relevant
to the shell installer goes under this directory, to be copied over to the ISO
later if the ISO is intended to use this installer. (Note: The ISO really
should have this installer! Whatever other installer is being used, this one is
highly stable and robust, and requires very little in the way of system
resources. It's a good backup if something goes wrong with another installer,
and has proven capable of being the only installer on the ISO as well. Other
installers are just eye-candy on top of this one.)

*******************
* $installer/bin/ *
*******************
	These directories host any end-user executable front-ends which call
the functions in the various enchantment libraries. The primary front-end is
enchantment, the shell installer.

**********************
* $installer/modules *
**********************
	Each installer is required to have this file, which lists which modules
it will make use of, and the ordering of them.


**********************
* modules/help/index *
**********************
	When the user calls for help, the contents of this file should be
displayed, which show what commands are available to the user and what they do.
This should probably be moved into installer-specific files.

************************
* modules/help/editors *
************************
	This is a list of all the editors that are available on the ISO.
Different folks, different editing preferences. Never force your users to use
one editor.

***************************
* modules/welcome/welcome *
***************************
	This is the welcome message displayed directly after the ISO finishes
booting. It mentions how to proceed to the next steps, and also how to access
different keymaps. This should probably be moved to installer-specific files.


********************
* modules/$module/ *
********************
	Each module directory houses all the files needed for that given
module. Each of the files/directories associated with a module are dealt with
in turn below.

***************************
* modules/$module/$module *
***************************
	These are the actual instructions that would be presented to the user.
The file includes a very simplistic markup to designate text which should be
highlighted (commands, headings, etc.). The markup is replaced at runtime to
display in the desired state (for the shell, escape codes either representing
bold or a color if libcolor is loaded).

********************************
* modules/$module/$module.info *
********************************
	This is the short summary info for the module displayed when the list
of modules is given (i.e., the shell installer's "steps" command).

**************************
* modules/$module/enter/ *
**************************
	This is a collection of scripts to run when the user enters the module.
Typically these scripts are used for preparatory work, such as ensuring that
module-specific temporary files exist and have needed start values, but could
do anything that needs to be executed at the start of a module. These scripts
are not passed any arguments, so they must be fully autonomous.

*************************
* modules/$module/exit/ *
*************************
	This is a collection of scripts to run when the user exits the module.
Typically these scripts are used for cleanup work, such as writing out final
values to the module-specific temporary files, but could do anything that needs
to be executed at the end of a module. These scripts are not passed any
arguments, so they must be fully autonomous.

***************************
* modules/$module/potion/ *
***************************
	This is the collection of scripts responsible for automating the
process of the module. Each script in this directory must take one argument,
which is the path to the potion to use for automating the module.


************************
* etc/enchantment.conf *
************************
	The config file contains all the global variables used by the
enchantment scripts used during the ISO runtime that can be user-configured.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ward/

	A collection of scripts for performing quality assurance on the
Cauldron codebase.

*************************
* ward/cauldron_sources *
*************************
	Defines an array which lists all the cauldron sources to scan using the
wards.

****************************
* ward/enchantment_sources *
****************************
	Defines an array which lists all the enchantment sources to scan using
the wards.


****************
* ward/libward *
****************
	Defines the various functions that are used to perform each ward's
checks.


******************
* ward/functions *
******************
	Performs a static analysis of function calls in files passed on the
command line, testing if they are defined first in the file being checked and
then in the different libraries in the respective component, checking from
outer prefix to inner.

*************************
* ward/global_variables *
*************************
	Performs a static analysis of global variables (the uppercased ones) in
files passed on the command line against a "definition" file (typically this
would either be one of the etc/config files, or one of the errorcodes files).

************************
* ward/local_variables *
************************
	Performs a static analysis of local variables (the lowercased ones
defined with the "local" keyword) in files passed on the command line against
the file being checked to ensure that the variable is properly defined within
the scope it is being used in, and before the variable is used.


*****************
* ward/ward-all *
*****************
	Runs all wards on the cauldron and enchantment sources. This should be
used for any "release" which is done to ensure both that the code is compliant
with the API and that there is higher quality of the code (bug prevention is
better than bug fixing).

************************
* ward/ward-configvars *
************************
	Tests the use of all configuration variables (global variables which
aren't error codes) in all cauldron and enchantment sources (as defined in
cauldron_sources and enchantment_sources above) to ensure that they are
properly defined in the respective configuration files.

************************
* ward/ward-errorcodes *
************************
	Tests both the internal consistency of the cauldron and enchantment
errorcodes files (makes sure that the number of codes matches the number of
messages and that every code has a corresponding message and vice versa), and
the use of all error codes in all cauldron and enchantment sources (as defined
in cauldron_sources and enchantment_sources above) to ensure that they are
properly defined in the respective errorcodes files.

***********************
* ward/ward-functions *
***********************
	Tests all function calls in all cauldron and enchantment sources (as
defined in cauldron_sources and enchantment_sources above) to ensure that they
are properly defined.

***********************
* ward/ward-localvars *
***********************
	Tests all local variables in all cauldron and enchantment sources (as
defined in cauldron_sources and enchantment_sources above) to ensure that they
are properly defined.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

