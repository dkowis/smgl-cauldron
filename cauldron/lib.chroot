#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  libcauldron is a set of functions used internally by the cauldron script
##
##=head1 COPYRIGHT
##
##  Copyright 2009 by the Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
## @param target dir to chroot into (optional)
##
## Prepares a chroot environment and exports necessary variables. For every
## target dir to chroot into, there should be one
## [cauldron_chroot_init ... cauldron_chroot_done] pair.
##
#-------------------------------------------------------------------------------
function cauldron_chroot_init() {
  local target="${1:-$CAULDRON_BUILD}"

  [[ "$CAULDRON_CHROOTINIT" -eq 1 ]] && return $ERR_CHROOT_NEST

  # if target is somehow null, return an error
  if [[ -z "$target" ]]
  then
    return $ERR_CHROOT_UNDEF
  fi

  # bind the needed mounts
  mount --bind "$CAULDRON_HOST/dev" "$target/dev" ||
    return $ERR_CHROOT_INIT
  mount --bind "$CAULDRON_HOST/dev/pts" "$target/dev/pts" ||
    return $ERR_CHROOT_INIT
  mount --bind "$CAULDRON_HOST/proc" "$target/proc" ||
    return $ERR_CHROOT_INIT

  # make sure the sorcerous library is loaded
  # which provides cauldron_source_sorcery
  if [[ -z cauldron_source_sorcery ]]
  then
    cauldron_load_library lib.sorcerous
  fi
  # source the target sorcery, so we have access to its functions
  cauldron_sorcerous_load "$target" || return $ERR_SORCEROUS_TARGET

  # everything went OK, so export the chroot definitions
  export CAULDRON_CHROOTINIT=1
  export CAULDRON_CHROOT=( "${CAULDRON_CHROOT_CMD[@]}" "$target" )

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param target dir to chroot into
##
## Cleans up the chroot environment after it is no longer needed.
##
#-------------------------------------------------------------------------------
function cauldron_chroot_done() {
  if [[ "$CAULDRON_CHROOTINIT" -eq 1 ]]
  then
    local target="${1:-$CAULDRON_BUILD}"

    # if target is somehow null, return an error
    if [[ -z "$target" ]]
    then
      return $ERR_CHROOT_UNDEF
    fi

    # unmount the bind mounts
    umount "$target/proc" || return $ERR_CHROOT_DONE
    umount "$target/dev/pts" || return $ERR_CHROOT_DONE
    umount "$target/dev" || return $ERR_CHROOT_DONE

    # clear the chroot definitions
    unset CAULDRON_CHROOTINIT
    unset CAULDRON_CHROOT
  fi

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param command plus args to execute inside the chroot
##
## Executes the command given as the first parameter and any args that follow
## inside the cauldron chroot defined by cauldron_chroot_init.
##
#-------------------------------------------------------------------------------
function cauldron_chroot() {
  if [[ "$CAULDRON_CHROOTINIT" -eq 1 ]]
  then
    "${CAULDRON_CHROOT[@]}" $* || return $ERR_CHROOT_EXEC
  else
    return $ERR_CHROOT_NOT_INIT
  fi

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param target_spells
##
## Performs cast on the list of spells needed for installation to the target
## system. "target_spells" can either be a list of spells passed as arguments or
## a file which contains such a list. The members of the spell list can be
## separated by anything IFS will recognize (typically any whitespace).
##
#-------------------------------------------------------------------------------
function cauldron_chroot_cast() {
  local target_spells=( "$@" )
  local spell=""

  # if a file that lists spells to cast is passed in, get the list of spells
  # from the file
  [[ -f "$target_spells" ]] && target_spells=( $(< "$target_spells") )

  # make sure we have a valid chroot of where we will cast
  [[ -z "$CAULDRON_CHROOT" ]] && return $ERR_CHROOT_INIT

  # cast all the spells in the list in one shot for better efficiency
  cauldron_chroot "$CAULDRON_CAST" "${target_spells[@]}" ||
    return $ERR_CHROOT_CAST

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param target_spells
##
## Performs dispel on the list of spells needed for installation to the target
## system. "target_spells" can either be a list of spells passed as arguments or
## a file which contains such a list. The members of the spell list can be
## separated by anything IFS will recognize (typically any whitespace).
##
#-------------------------------------------------------------------------------
function cauldron_chroot_dispel() {
  local target_spells=( "$@" )
  local spell=""

  # if a file that lists spells to cast is passed in, get the list of spells
  # from the file
  [[ -f "$target_spells" ]] && target_spells=( $(< "$target_spells") )

  # make sure we have a valid chroot of where we will cast
  [[ -z "$CAULDRON_CHROOT" ]] && return $ERR_CHROOT_INIT

  # dispel all the spells in the list in one shot for better efficiency
  cauldron_chroot "$CAULDRON_DISPEL" "${target_spells[@]}" ||
    return $ERR_CHROOT_DISPEL

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param target_spells
##
## Performs cast and immediate dispel on the each spell in the list of spells
## to ensure that each spell is cast "cleanly" (meaning that no idle
## dependencies are laying about in the build tree to get inadvertently picked
## up by arguably broken spell builds). "target_spells" can either be a list of
## spells passed as arguments or a file which contains such a list. The members
## of the spell list can be separated by anything IFS will recognize (typically
## any whitespace).
##
#-------------------------------------------------------------------------------
function cauldron_chroot_cast_clean() {
  local target_spells=( "$@" )
  local spell=""

  # if a file that lists spells to cast is passed in, get the list of spells
  # from the file
  [[ -f "$target_spells" ]] && target_spells=( $(< "$target_spells") )

  # Since we will be installing from the running ISO system instead of a giant
  # tarball, for each spell we only need to make sure that the cache file is
  # available. This will require that the ISO sorcery has caching enabled. The
  # caching should really be turned on from the very beginning though...
  if [[ -z "$ARCHIVE" ]]
  then
    cauldron_sorcerous_load || return $ERR_SORCEROUS_TARGET
  fi
  [[ "$ARCHIVE" == "off" ]] && return $ERR_SORCEROUS_ARCHIVE

  # make sure we have a valid chroot of where we will cast
  [[ -z "$CAULDRON_CHROOT" ]] && return $ERR_CHROOT_INIT

  for spell in "${target_spells[@]}"
  do
    # cast the spell to generate the cache, and then dispel it from the system
    # so that it isn't wasting space in the build filesystem (and so it doesn't
    # interfere with later casts for spells that, wrongly, pull in dependencies
    # that are present but not wanted)
    #
    # TODO: to be able to ensure that dependencies that get pulled in are also
    # dispelled we'll have to get the list of everything that was cast during
    # the cast round from sorcery, which at present will require modifying cast
    # itself to export the list (otherwise we'll have to trap the output and
    # parse it, which is far less machine-readable)
    cauldron_chroot "$CAULDRON_CAST" "$spell" || return $ERR_CHROOT_CAST
    cauldron_chroot "$CAULDRON_DISPEL" "$spell" || return $ERR_CHROOT_DISPEL
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
