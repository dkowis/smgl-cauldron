#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  libcauldron is a set of functions used internally by the cauldron script
##
##=head1 COPYRIGHT
##
##  Copyright 2009 by the Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
## @param path to the sorcery config to load
##
## Sources the sorcery config files. Mainly called by cauldron_chroot_init.
##
## TODO:
## this needs to be fixed, since sorcery uses some absolute paths and has some
## hard-coded into itself, therefore it will source parts from the target but
## other parts will actually be sourced from the HOST
##
## the solution may involve having a modified sorcery config for the build
## chroot, which will need a lot of modified paths
##
#-------------------------------------------------------------------------------
function cauldron_sorcerous_load() {
  local config="${1:-$CAULDRON_ISORCERY_CONFIG}"
  local local_config="${2:-$CAULDRON_ISORCERY_LCONFIG}"

  # source the main config file
  source "$config" || return $ERR_SORCEROUS_TARGET

  # if the local config exists, source it
  if [[ -f "$local_config" ]]
  then
    source "$local_config" || return $ERR_SORCEROUS_TARGET
  fi

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param stage
##
## Configures the toolchain for building on the TARGET system. In other
## words, this sets the options/variables necessary to build a
## cross-compiler system to generate binaries for the target system. The
## parameter "stage" is an int and sets the variables for stage1 and stage2 of
## the cross-compile. Stage1 is the building of the initial tools. Stage2 is for
## the building of glibc, because it's a little bit special. Stage3 is
## the cross-compilation of the basesystem via sorcery rebuild using the
## cross-compiler.
##
#-------------------------------------------------------------------------------
function cauldron_sorcerous_cross_configure() {
  local stage="$1"
  local hostarch="$CAULDRON_HOST_ARCH"
  local arch="$CAULDRON_ARCH"

  if [[ -z modify_config ]]
  then
    . "$CAULDRON_HSORCERY_LIBS/libtrack" 2> $CAULDRON_NULL ||
      liberror_die $ERR_SORCEROUS_HOST
  fi

  # make sure the sorcery local config dir exists on the ISO
  mkdir -p "$CAULDRON_ISORCERY_LCONFIG" || return $ERR_SORCEROUS_ISO_SORCERY_CONFIG

  case "$stage" in
    1)
      modify_config "$CAULDRON_ISORCERY_LCONFIG" CUSTOM_CFLAGS \
        "--host=$hostarch --target=$arch"
    ;;
    2)
      modify_config "$CAULDRON_ISORCERY_LCONFIG" CUSTOM_CFLAGS \
        "--build=$hostarch --host=$arch"
    ;;
    3)
      modify_config "$CAULDRON_ISORCERY_LCONFIG" CUSTOM_CFLAGS \
        "--build=$hostarch --host=$arch --target=$arch"
    ;;
  esac
}

#-------------------------------------------------------------------------------
## @param spool_path
##
## Downloads a sorcery source tarball from the net if we don't already have one
## or are forcing a download, and places it in spool_path (optional), or in
## the CAULDRON_BUILD/var/spool/sorcery directory.
##
#-------------------------------------------------------------------------------
function cauldron_sorcerous_download() {
  local spool="${1:-$CAULDRON_BUILD/var/spool/sorcery}"
  local sorcery_url="${CAULDRON_SORCERY_URL}"
  local url_get=( "${CAULDRON_URL_DL_CMD[@]}" )

  # ensure the spool dir exists for getting spell sources
  mkdir -p "$spool" || return $ERR_BUILD_SPOOL

  # check to see if we will copy or download the sorcery source tarball
  # then get the source tarball and place it in CAULDRON_BUILD
  if [[ ! -e "$spool/$sorcery" || "$CAULDRON_FORCE_DOWNLOAD" == "yes" ]]
  then
    # run in a subshell as an easy way of not messing with the working directory
    (
      cd "$spool"
      "${url_get[@]}" "$sorcery_url" ||
        return $ERR_SORCEROUS_DOWNLOAD
    )
  fi &&

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param spool_path
##
## Installs sorcery into the build directory. The download_path parameter
## (optional) indicates where the sorcery source tarball to install from is
## stored. If spool_path is not supplied, the tarball is assumed to be in
## the CAULDRON_BUILD/var/spool/sorcery directory.
##
#-------------------------------------------------------------------------------
function cauldron_sorcerous_install() {
  local spool="${1:-$CAULDRON_BUILD/var/spool/sorcery}"
  local sorcery="$CAULDRON_SORCERY_PKG"

  # unpack the source tarball
  tar -C "$CAULDRON_BUILD/usr/src" -jxf "$spool/$sorcery" ||
    return $ERR_SORCEROUS_UNPACK

  [[ -x "$CAULDRON_BUILD/usr/src/sorcery/install" ]] ||
    return $ERR_SORCEROUS_UNPACK

  # make sure the chroot library is loaded so cauldron_chroot is available
  if [[ -z cauldron_chroot ]]
  then
    cauldron_load_library lib.chroot
  fi
  # install the source tarball, relative to CAULDRON_BUILD
  "$CAULDRON_BUILD/usr/src/sorcery/install" "$CAULDRON_BUILD" ||
    return $ERR_SORCEROUS_INSTALL

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
