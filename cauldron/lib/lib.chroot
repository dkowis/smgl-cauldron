#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  libcauldron is a set of functions used internally by the cauldron script
##
##=head1 COPYRIGHT
##
##  Copyright 2009 by the Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

# global variables for tracking chroot users
LIBCHROOT_PATHS=()
LIBCHROOT_USERS=()

#-------------------------------------------------------------------------------
## @param target dir to chroot into (optional)
## @param target sorcery config (optional)
## @param target sorcery local config (optional)
##
## Prepares a chroot environment and exports necessary variables. For every
## target dir to chroot into, there should be one
## [cauldron_chroot_init ... cauldron_chroot_done] pair.
##
## If supplied, the second and third parameters should be file paths to the
## sorcery config and local config inside the chroot target (the first
## parameter). They will default to etc/sorcery/config and
## etc/sorcery/local/config relative to the chroot target, respectively.
##
#-------------------------------------------------------------------------------
function cauldron_chroot_init() {
  local target="${1:-$CAULDRON_BUILD}"
  local num="${#LIBCHROOT_PATHS[@]}"
  local sconfig="${2:-$target/etc/sorcery/config}"
  local slconfig="${3:-$target/etc/sorcery/local/config}"

  # if target is somehow null, return an error
  if [[ -z "$target" ]]
  then
    return $ERR_CHROOT_UNDEF
  fi

  # test if the target path is already loaded as a chroot -- if it is, just
  # increase the count, but if it isn't do the bind mounts and set up the
  # counts
  if $(echo "${LIBCHROOT_PATHS[@]}" | grep -q "$target")
  then
    for((path=0; path < num; path++))
    do
      if [[ "$target" == "${LIBCHROOT_PATHS[path]}" ]]
      then
        ((LIBCHROOT_USERS[path]++))
      fi
    done
  else
    # bind the needed mounts in order
    for bind in dev dev/pts proc
    do
      "${CAULDRON_CMD_MOUNT_BIND[@]}" \
        "$CAULDRON_HOST/$bind" \
        "$target/$bind" ||
          return $ERR_CHROOT_INIT
    done

    # add the target path to the list of chrooted paths
    LIBCHROOT_PATHS[num]="$target"
    # set the user count to 1
    LIBCHROOT_USERS[num]=1
  fi

  # test if the target path matches the currently defined chroot command target
  # path -- if it doesn't, we need to set the chroot command
  if [[ "${#CAULDRON_CHROOT[@]}" -eq 0 ||
    "$target" == "${CAULDRON_CHROOT[${#CAULDRON_CHROOT[*]}-1]}" ]]
  then
    # make sure the sorcerous library is loaded
    # which provides cauldron_source_sorcery
    if [[ -z cauldron_source_sorcery ]]
    then
      cauldron_load_library lib.sorcerous
    fi
    # source the target sorcery, so we have access to its functions
    cauldron_sorcerous_load $sconfig $slconfig || return $ERR_SORCEROUS_TARGET

    # everything went OK, so export the chroot definitions
    CAULDRON_CHROOT=( "${CAULDRON_CMD_CHROOT[@]}" "$target" )
  fi

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param target dir to chroot into
##
## Cleans up the chroot environment after it is no longer needed.
##
#-------------------------------------------------------------------------------
function cauldron_chroot_done() {
  local target="${1:-$CAULDRON_BUILD}"
  local index=""

  # if target is somehow null, return an error
  if [[ -z "$target" ]]
  then
    return $ERR_CHROOT_UNDEF
  fi

  for ((index=0; index < "${#LIBCHROOT_PATHS[@]}"; index++))
  do
    if [[ "$target" == "${LIBCHROOT_PATHS[index]}" ]]
    then
      # remove one "lock" for each time cauldron_chroot_done is called until we
      # are down to the last one, and then do the actual cleanup of the chroot
      if [[ "${LIBCHROOT_USERS[index]}" -gt 1 ]]
      then
        LIBCHROOT_USERS[index]=$((LIBCHROOT_USERS[index]-1))
      else
        # unmount the bind mounts
        for bind in proc dev/pts dev
        do
          "${CAULDRON_CMD_UNMOUNT[@]}" "$target/$bind" || return $ERR_CHROOT_DONE
        done

        # clear the chroot definitions
        unset CAULDRON_CHROOT
        unset LIBCHROOT_USERS[index]
        unset LIBCHROOT_PATHS[index]
      fi
    fi
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param -q [quiet -- don't output anything, just test] (optional)
## @param chroot path (optional)
##
## Determines the current chroot. If called with no parameters, it will return
## (echo) the path of the current chroot. If provided the chroot path parameter,
## it will test whether the provided path matches the current chroot, and will
## return an error if they don't match.
##
#-------------------------------------------------------------------------------
function cauldron_chroot_current() {
  local num="${#CAULDRON_CHROOT[*]}"
  local current=""
  local target=""
  local match=0
  local quiet=0

  # check if we should disable output
  if [[ "$1" == "-q" ]]
  then
    quiet=1
    shift
  fi
  target="$1"

  # use the correct index into the array (indexing starts from 0, but count of
  # elements starts from 1)
  [[ "$num" -gt 0 ]] && ((num--))
  current="${CAULDRON_CHROOT[num]}"

  # if there is no current chroot, then return immediately (no sense testing if
  # anything matches the currently defined chroot when there is none)
  [[ -z "$current" ]] && return $ERR_CHROOT_CURRENT

  # make sure that the chroot is also present in LIBCHROOT_PATHS and
  # LIBCHROOT_USERS
  for ((index=0; index < "${#LIBCHROOT_PATHS[@]}"; index++))
  do
    if [[ "$current" == "${LIBCHROOT_PATHS[index]}" ]]
    then
      if [[ "${LIBCHROOT_USERS[index]}" -ge 1 ]]
      then
        match=1
      fi
    fi
  done

  # if the currently defined chroot doesn't match a loaded chroot in
  # LIBCHROOT_PATHS and LIBCHROOT_USERS, then there is something wrong and the
  # chroot should probably be reloaded
  [[ "$match" -eq 0 ]] && return $ERR_CHROOT_CURRENT

  if [[ -n "$target" ]]
  then
    # test if the target path doesn't match the currently defined chroot command
    # target path -- if it does match, then we can just do nothing till the end
    # of the function where we return ERR_OK; if it doesn't match, return error
    # here
    if [[ "$target" != "$current" ]]
    then
      # the target chroot doesn't match the current chroot
      return $ERR_CHROOT_CURRENT
    fi
  else
    # output the currently loaded chroot
    echo "$current"
  fi

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param command plus args to execute inside the chroot
##
## Executes the command given as the first parameter and any args that follow
## inside the cauldron chroot defined by cauldron_chroot_init.
##
#-------------------------------------------------------------------------------
function cauldron_chroot() {
  if cauldron_chroot_current -q
  then
    "${CAULDRON_CHROOT[@]}" $* || return $ERR_CHROOT_EXEC
  else
    return $ERR_CHROOT_CURRENT
  fi

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param target_spells
##
## Performs cast on the list of spells needed for installation to the target
## system. "target_spells" can either be a list of spells passed as arguments or
## a file which contains such a list. The members of the spell list can be
## separated by anything IFS will recognize (typically any whitespace).
##
#-------------------------------------------------------------------------------
function cauldron_chroot_cast() {
  local target_spells=( "$@" )
  local spell=""

  # if a file that lists spells to cast is passed in, get the list of spells
  # from the file
  [[ -f "$target_spells" ]] && target_spells=( $(< "$target_spells") )

  # make sure we have a valid chroot of where we will cast
  [[ -z "$CAULDRON_CHROOT" ]] && return $ERR_CHROOT_INIT

  # cast all the spells in the list in one shot for better efficiency
  cauldron_chroot "${CAULDRON_CMD_CAST[@]}" "${target_spells[@]}" ||
    return $ERR_CHROOT_CAST

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param target_spells
##
## Performs dispel on the list of spells needed for installation to the target
## system. "target_spells" can either be a list of spells passed as arguments or
## a file which contains such a list. The members of the spell list can be
## separated by anything IFS will recognize (typically any whitespace).
##
#-------------------------------------------------------------------------------
function cauldron_chroot_dispel() {
  local target_spells=( "$@" )
  local spell=""

  # if a file that lists spells to cast is passed in, get the list of spells
  # from the file
  [[ -f "$target_spells" ]] && target_spells=( $(< "$target_spells") )

  # make sure we have a valid chroot of where we will cast
  [[ -z "$CAULDRON_CHROOT" ]] && return $ERR_CHROOT_INIT

  # dispel all the spells in the list in one shot for better efficiency
  cauldron_chroot "${CAULDRON_CMD_DISPEL[@]}" "${target_spells[@]}" ||
    return $ERR_CHROOT_DISPEL

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param target_spells
##
## Performs cast and immediate dispel on the each spell in the list of spells
## to ensure that each spell is cast "cleanly" (meaning that no idle
## dependencies are laying about in the build tree to get inadvertently picked
## up by arguably broken spell builds). "target_spells" can either be a list of
## spells passed as arguments or a file which contains such a list. The members
## of the spell list can be separated by anything IFS will recognize (typically
## any whitespace).
##
#-------------------------------------------------------------------------------
function cauldron_chroot_cast_clean() {
  local target_spells=( "$@" )
  local spell=""

  # if a file that lists spells to cast is passed in, get the list of spells
  # from the file
  [[ -f "$target_spells" ]] && target_spells=( $(< "$target_spells") )

  # Since we will be installing from the running ISO system instead of a giant
  # tarball, for each spell we only need to make sure that the cache file is
  # available. This will require that the ISO sorcery has caching enabled. The
  # caching should really be turned on from the very beginning though...
  if [[ -z "$ARCHIVE" ]]
  then
    cauldron_sorcerous_load || return $ERR_SORCEROUS_TARGET
  fi
  [[ "$ARCHIVE" == "off" ]] && return $ERR_SORCEROUS_ARCHIVE

  # make sure we have a valid chroot of where we will cast
  [[ -z "$CAULDRON_CHROOT" ]] && return $ERR_CHROOT_INIT

  for spell in "${target_spells[@]}"
  do
    # cast the spell to generate the cache, and then dispel it from the system
    # so that it isn't wasting space in the build filesystem (and so it doesn't
    # interfere with later casts for spells that, wrongly, pull in dependencies
    # that are present but not wanted)
    #
    # TODO: to be able to ensure that dependencies that get pulled in are also
    # dispelled we'll have to get the list of everything that was cast during
    # the cast round from sorcery, which at present will require modifying cast
    # itself to export the list (otherwise we'll have to trap the output and
    # parse it, which is far less machine-readable)
    cauldron_chroot "${CAULDRON_CMD_CAST[@]}" "$spell" ||
      return $ERR_CHROOT_CAST
    cauldron_chroot "${CAULDRON_CMD_DISPEL[@]}" "$spell" ||
      return $ERR_CHROOT_DISPEL
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
