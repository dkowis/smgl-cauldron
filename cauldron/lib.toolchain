#!/bin/bash
#-------------------------------------------------------------------------------
##
##=head1 SYNOPSIS
##
##  lib.hostcache provides functions for generating spell caches from what's
##                available on the HOST system - only to be used for the initial
##                build toolchain
##
##=head1 COPYRIGHT
##
##  Copyright 2009 by the Cauldron Team
##
##=head1 FUNCTIONS
##
##=over 4
##
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
##
## Scans the sorcery archspec files to find the host triplet.
##
## Later, this will be used to set the value of HOST_TRIPLE in
## /etc/cauldron/config after the code to write the config file is in place.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_host_get() {
  local specs="${CAULDRON_HOST_ARCH_PATH//\"/}"
  local search="-perm 400 -type f -name $CAULDRON_HOST_ARCH"
  local arch_spec=
  local host_triple=

  # get the value for the HOST triplet from sorcery archspecs

  if [[ "$(find --version | grep -q 'version 4\.1\(\.\|$\)')" ]]
  then
    arch_spec="$(find $spec $search -print 2>$CAULDRON_NULL)"
  else
    arch_spec="$(find -L $spec $search -print 2>$CAULDRON_NULL)"
  fi

  # no matching arch spec found
  [[ -z "$arch_spec" ]] && return $ERR_HOST_TRIPLE

  host_triple="$(grep 'HOST=' $arch_spec | cut -d = -f 2)"

  # no matching host definition
  [[ -z "$host_triple" ]] && return $ERR_HOST_TRIPLE

  echo "$host_triple"

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param spell
## @param install_log_path
##
## Builds a cache file from the information provided by the install log for the
## spell passed as an argument using sorcery's create_cache_archive. It expects
## the provided spell to include the version as a suffix (i.e. bash-3.2).
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_cache_resurrect() {
  local spell="$1"
  local install_logs="${2:-$CAULDRON_HOST/var/log/sorcery/install}"
  local cache="$CAULDRON_CACHES/$spell.tar"

  if [[ -z create_cache_archive ]]
  then
    . "$CAULDRON_HSORCERY_LIBS/libstate" 2>$CAULDRON_NULL ||
      liberror_die $ERR_SORCEROUS_HOST_SORCERY
  fi

  # generate the missing cache file using sorcery
  create_cache_archive "$install_logs/$spell" "$cache" "${cache}${EXTENSION}" ||
    return $ERR_TOOLCHAIN_RESURRECT

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param spell_name
## @param spell_version
## @param install_log_path
##
## Generates a spell cache by manually copying files from the spell's install
## log and packaging them. Assumes that the spell's install log exists and is
## intact.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_cache_gather() {
  local spell="$1"
  local version="$2"
  local install_logs="${3:-$CAULDRON_HOST/var/log/sorcery/install}"
  local gather="$CAULDRON_TMP/gather"

  [[ -d "$install_logs" ]] || return $ERR_TOOLCHAIN_GATHER

  [[ -z "$spell" ]] && return $ERR_TOOLCHAIN_GATHER
  [[ -z "$version" ]] && return $ERR_TOOLCHAIN_GATHER

  # make sure the gather path is clean
  # completely wipe it out and recreate it
  rm -fr "$gather" || return $ERR_RM_FILES
  mkdir -p "$gather" || return $ERR_MK_DIR

  # find all the files installed by the given spell
  for file in "$install_logs/${spell}-${version}"/*
  do
    # copy all files from the sorcery install log
    cp -a --parents "$file" "$gather/" || return $ERR_TOOLCHAIN_GATHER
  done

  # package the collection of files from the install log as a cache file
  tar jcf "${spell}-${version}.tar.bz2" \
    --transform "s#$gather/##" \
    "$gather"/* ||
      return $ERR_TOOLCHAIN_GATHER

  # if the packaging was successful, wipe out the gather dir
  rm -fr "$gather"

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param spell
##
## Generates a spell cache by casting the spell and then dispelling it. This
## assumes that ARCHIVE is already set to "yes" in the chroot's sorcery config.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_cache_cast() {
  local spells="$CAULDRON_SYS_SPELLS"

  [[ -f "$spells" ]] || return $ERR_TOOLCHAIN_CAST

  # make sure we have a chroot accessible
  # default to $CAULDRON_BUILD, unless one is already defined
  cauldron_chroot_init
  [[ $? -eq $ERR_OK || $? -eq $ERR_CHROOT_NEST ]] || return $ERR_CHROOT_INIT

  # generate the caches for the needed spells
  cauldron_chroot_cast_clean "$spells" || return $ERR_TOOLCHAIN_CAST

  # clean up the chroot
  cauldron_chroot_done || return $ERR_CHROOT_DONE

  return $ERR_OK
}

#-------------------------------------------------------------------------------
## @param spell
##
## Generates a cache file for the given spell. It will try to use information
## from an already installed/cast spell (in the case of the host system having
## sorcery configured to not generate the caches), and, failing that, will cast
## the spell and then dispel it (the second step only being performed if
## aggressive is true).
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_cache_make() {
  local spell="$1"
  local config="$CAULDRON_ISORCERY_CONFIG"
  local lconfig="$CAULDRON_ISORCERY_LCONFIG"
  local install_logs="$CAULDRON_HOST/var/log/sorcery/install"
  local version=""

  # First check to see if the spell was installed, but no cache exists.
  if gaze -q installed "$spell" > $CAULDRON_NULL
  then
    # use sorcery to generate a cache file using the install log
    # this is the least intensive of the three options
    version="$(grep ^$spell $CAULDRON_HSORCERY_PACKAGES | cut -d: -f4)"

    if ! cauldron_toolchain_cache_resurrect "${spell}-${version}"
    then
      # Only do this part if the caller wants us to be aggressive in building the
      # cache.
      if [[ "$CAULDRON_AGGRESSIVE" == yes ]]
      then
        if [[ -e "$install_logs/${spell}-${version}" ]]
        then
          # try making a cache from the install logs manually
          cauldron_toolchain_cache_gather "$install_logs" "$spell" "$version"
        fi
      fi
    fi

  # otherwise, there's no install logs so we will need to cast the spell
  elif [[ "$CAULDRON_AGGRESSIVE" == "yes" ]]
  then
    # make sure sorcery is in the build chroot
    [[ -f "$config" ]] || return $ERR_TOOLCHAIN_SORCERY

    # sorcery defaults to archiving, but can be overridden in a local config
    # check for the local config
    if [[ -f "$lconfig" ]]
    then
      archive=$(grep '[^#]*ARCHIVE=' "$config" | cut -d= -f2)

      # if archiving is off in the local config, turn it on
      if [[ "$archive" != "on" ]]
      then
        sed -i 's/ARCHIVE=.*/ARCHIVE="on"/' "$config" ||
          return $ERR_SORCEROUS_ARCHIVE
      fi
    fi

    # get the cache by manually casting/dispelling
    # this is the most resource intensive of the three options
    cauldron_toolchain_cache_cast "$spell" || return $ERR_TOOLCHAIN_CAST
  fi

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## Generates the base toolchain using the HOST information. This is
## done by unpacking the cache file for each spell required for the
## toolchain if it exists. If it does not exist, this may be because
## caching is disabled on the host machine, or perhaps the cache file
## was deleted by accident. Otherwise the spell must be cast within
## a chroot environment in the CAULDRON_BUILD directory.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_build_host() {
  local spell=""
  local version=""
  local spell_cache=""
  local host_triple=""
  local ext="$CAULDRON_CACHE_EXTENSION"

  # get the value for HOST_TRIPLE
  host_triple="$(cauldron_toolchain_host_get)"

  [[ -z "$host_triple" ]] && return $ERR_HOST_TRIPLE

  # grab the list of spells needed as the base tool-chain which will be
  # used to create the cross-compile tool-chain
  for spell in "$CAULDRON_TOOLCHAIN"
  do
    # grab the version for the spell from sorcery's state info
    # on what's installed
    version="$(grep \"^$spell\" $CAULDRON_HSORCERY_PACKAGES | cut -d: -f4)"

    # check if spell found on the system
    if [[ -n "$version" ]]
    then
      # set SPELL_CACHE as shorthand for SPELL-VERSION-HOST_TRIPLE.tar.bz2
      spell_cache="${spell}-${version}-${host_triple}.tar${ext}"

      # unpack the cache file, effectively installing
      # the spell into the BUILD dir
      # the unpacking is done against the BUILD dir as the root dir, so
      # this should not touch the HOST filesystem at all
      tar xjf "$CAULDRON_BUILD/$spell_cache" -C "$CAULDRON_BUILD/" ||
        return $ERR_UNPACK_CACHE

      # if the tar was successful, then remove the temporary file
      rm "$CAULDRON_BUILD/$spell_cache" ||
        return $ERR_RM_CACHE
    fi
  done

  return $ERR_OK
}

#-------------------------------------------------------------------------------
##
## This builds the cross-compiler to produce the TARGET binaries.
##
#-------------------------------------------------------------------------------
function cauldron_toolchain_build_cross() {
  local chroot=0

  # make sure we have a chroot accessible
  # default to $CAULDRON_BUILD, unless one is already defined
  if [[ "$CAULDRON_CHROOTINIT" -ne 1 ]]
  then
    chroot=1
    cauldron_chroot_init
    [[ $? -eq 0 || $? -eq $ERR_CHROOT_NEST ]] || return $ERR_CHROOT_INIT
  fi

  # build the stage 1 tools
  cauldron_sorcerous_configure 1 || return $ERR_TOOLCHAIN_STAGE1
  cauldron_chroot "$CAULDRON_CAST" "binutils" || return $ERR_CHROOT_CAST
  cauldron_chroot "$CAULDRON_CAST" "gcc" || return $ERR_CHROOT_CAST

  # build glibc (stage 2)
  cauldron_sorcerous_configure 2 || return $ERR_TOOLCHAIN_STAGE2
  cauldron_chroot "$CAULDRON_CAST" "glibc" || return $ERR_CHROOT_CAST

  # rebuild gcc (still stage 1, but this time linked against the
  # cross-glibc
  cauldron_sorcerous_configure 1 || return $ERR_TOOLCHAIN_STAGE1
  cauldron_chroot "$CAULDRON_CAST" "gcc" || return $ERR_CHROOT_CAST

  # do a sorcery rebuild inside the BUILD dir to
  # generate the cross-compile tool-chain (stage 3)
  cauldron_sorcerous_configure 3 || return $ERR_TOOLCHAIN_STAGE3
  cauldron_chroot "$CAULDRON_REBUILD" || return $ERR_CHROOT_REBUILD

  # if we had to initialize a default chroot
  # clean up by shutting it down
  if [[ "$chroot" -eq 1 ]]
  then
    cauldron_chroot_done || return $ERR_CHROOT_DONE
  fi
}

#-------------------------------------------------------------------------------
##
## This software is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.
##
## This software is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this software; if not, write to the Free Software
## Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
##
#-------------------------------------------------------------------------------

# vim:ai:tw=80:tabstop=2:softtabstop=2:shiftwidth=2:expandtab
