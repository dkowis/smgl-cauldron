#!/bin/bash

shell() {
  echo  "Press CTRL-D or type exit to return"
  /bin/bash
}

test_cdrom() {
  local found=false
  mount -n -r -t iso9660 $1 $MOUNT 2>/dev/null
  if [ -f $ID ] ;then
    found=true
  fi
  umount -n $MOUNT 2>/dev/null
  $found
}

# at the end SMGL_CD is defined to the device where the SMGL CD is found
# or else SMGL_CD is undefined

scan_cdroms()  {

  SMGL_CD='unknown'

  if [[ -e /cdrom.hint ]] ;then
    SMGL_CD=$(<cdrom.hint)
    return
  fi

  echo "Trying to find the SMGL CD automatically..."
  for handler in /proc/*/*/media ;do
    if grep -q 'cdrom' $handler ;then
      handler=${handler%/media}
      device=/dev/${handler##*/}

      test_cdrom $device &&
      {
        SMGL_CD=$device
        return
      }
    fi
  done

  echo "Trying harder to find the SMGL CD..."
  # Next try: look at all /proc/partitions stuff, make devices if neccessary
  local major minor blocks name
  while read major minor blocks name ;do
    (( major )) 2>/dev/null || continue # Don't process non-numeric lines

    [ -b /dev/$name ] ||
    mknod /dev/$name b $major $minor

    test_cdrom /dev/$name &&
    {
      SMGL_CD=/dev/$name
      return
    }

  done </proc/partitions
}

main()  {

  # Process init options directed at us
  while [[ $# -gt 0 ]] ;do
    if [[ $1 == 'shellout' ]] ;then
      echo "requested a shellout!"
    else
      INITOPTS[i++]=$1
    fi
    shift
  done

  while true ;do

    scan_cdroms

    if [[ $SMGL_CD == "unknown" ]] ;then
      echo "Unable to find the SMGL CD in anything remotely looking like a"
      echo "CD drive that I can see right now. Please load appropriate"
      echo "modules, or explicitly specify a device to boot from by entering e.g."
      echo "  boot-from /dev/hdc"
      echo "Press Ctrl-D or type 'exit' when done."
      /bin/bash
      continue
    fi

    echo "Attempting to boot from $SMGL_CD..."

       ROOT=$SMGL_CD
    VFSTYPE=iso9660
    OPTIONS="defaults,ro"

    mount -n -t $VFSTYPE  -o $OPTIONS  $ROOT  $MOUNT ||
    {
      echo "Unable to mount $ROOT as $VFSTYPE, retrying with type auto."
      mount -n -t auto $ROOT $MOUNT || {
        echo "ERROR: Unable to mount $ROOT even with type auto."
        continue
      }
    }

    if [ ! -x $MOUNT/sbin/init ]; then
      echo "ERROR: Unable to locate /sbin/init on $ROOT."
      umount -n $MOUNT
      continue
    fi

    umount -n /proc

    # setup writable /etc /root and nfs stat dir if ISO is ROOT
    if [ -f $ID ] ;then
      /bin/mount -t $VFSTYPE -o $OPTIONS $ROOT $MOUNT/mnt/cdrom
      cd $MOUNT/mnt/cdrom
      for i in tmp etc root var/log var/lib/nfs ;do
        echo "Setting up writable /$i for install"
        /bin/mount -t tmpfs tmpfs $MOUNT/$i
        $MOUNT/bin/cp -a --parents $i $MOUNT
      done
      cd $MOUNT
      /bin/umount $MOUNT/mnt/cdrom

      # Installer needs this to do its "eject CD" magic
      echo "$ROOT" >$MOUNT/etc/cddev
    fi

    cd $MOUNT

    if  [  -d  initrd  ];  then
       pivot_root  .  initrd
    else
       pivot_root  .  mnt
    fi

    echo "Running /sbin/init ${INITOPTS[*]}"

# if the new root filesystem uses devfs, /dev/console should not exist
    if [ ! -e dev/console ]; then
      mount -n -t devfs  devfs  dev
    fi

    mount -n -t proc proc proc

    exec chroot . /sbin/init "${INITOPTS[*]}" <dev/console >dev/console 2>&1

  done

}

# here is the real start of this shell script

export PATH=/bin:/usr/bin:/sbin:/usr/sbin

mount -n -t proc  proc  /proc

KERNEL=`uname -r`
 MOUNT=/mnt/cdrom
    ID=$MOUNT/etc/sourcemage_version

main "$@"
