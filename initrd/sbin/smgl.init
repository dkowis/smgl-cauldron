#!/bin/bash

shell() {
  echo  "Press CTRL-D or type exit to return"
  /bin/bash
}

show_modules()  {
  for ITEM in "$1"/* ;do
    echo ${ITEM%%*/}
    if [[ -d "${ITEM}" ]] ;then
      echo "Directory"
    else
      echo "Module"
    fi
  done
}

input_module_parameters()  {
  "${DIALOG[@]}" --nocancel --inputbox \
    "You can optionally enter module parameters" 0 60
}

# returns when the user is done loading modules

load_module()  {

  if [ -n "$1" ]; then
    while true ;do
      MODULE=$("${DIALOG[@]}"                                      \
                  --title "Module Menu" --cancel-label "back"      \
                  --menu "Please select a module to load:" 15 60 0 \
                  $(show_modules  "$1"))

      # if the user hit the <Cancel> button, we return.
      [ -n "${MODULE}" ] ||
        return -1;

      if [ -d "$1/${MODULE}" ] ;then
        #the user selected a directory, we display a new menu
        load_module "$1/${MODULE}"
      elif [ -f "$1/${MODULE}" ]; then
        # he selected a file, load that menu
        # remove .o (2.4 kernels) or .ko (2.6 kernels) extension.
        MODULE=${MODULE%.o}     &&
        MODULE=${MODULE%.ko}    &&
        PARAMETERS=$(input_module_parameters) &&
        echo "Running modprobe ${MODULE} ${PARAMETERS}"      &&
        if modprobe "${MODULE}" $PARAMETERS ;then
          read -p "Success. Press enter..."
        else
          read -p "Failure. Press enter..."
        fi
      fi
    done

  else
    MODULE_DIR="/lib/modules/${KERNEL}/kernel"

    if [ ! -d "${MODULE_DIR}" ]; then
      "${DIALOG[@]}" --msgbox "Unable to find any modules" 6 60
      return -1;
    fi
    load_module "${MODULE_DIR}"
  fi
}

test_cdrom() {
  local found=false
  mount -n -r -t iso9660 $1 $MOUNT 2>/dev/null
  if [ -f $ID ] ;then
    found=true
  fi
  umount -n $MOUNT 2>/dev/null
  $found
}

# at the end SMGL_CD is defined to the device where the SMGL CD is found
# or else SMGL_CD is undefined

scan_cdroms()  {

  unset SMGL_CD

  for handler in /proc/*/*/media ;do
    if grep -q 'cdrom' $handler ;then
      handler=${handler%/media}
      device=/dev/${handler##*/}

      test_cdrom $device &&
      {
        SMGL_CD=$device
        return
      }
    fi
  done

  echo "Trying harder to find the SMGL CD..."
  # Next try: look at all /proc/partitions stuff, make devices if neccessary
  local major minor blocks name
  while read major minor blocks name ;do
    (( major )) 2>/dev/null || continue # Don't process non-numeric lines

    [ -b /dev/$name ] ||
    mknod /dev/$name b $major $minor

    test_cdrom /dev/$name &&
    {
      SMGL_CD=/dev/$name
      return
    }

  done </proc/partitions
}


toggle_hotplug() {
  [[ "$HOTPLUG_ACTION" == "enable" ]] &&
    HOTPLUG_ACTION="disable" ||
    HOTPLUG_ACTION="enable"
}

show_filesystems()  {

  for FILESYSTEM in `grep -v nodev /proc/filesystems`;
  do

    echo  "${FILESYSTEM}"
    echo  filesystem

  done

}


select_root()  {

  FILESYSTEMS=`show_filesystems`                    &&

  NEW_ROOT=`"${DIALOG[@]}"  --inputbox              \
                    "Please enter the root device." \
                    8 60                            \
                    "${ROOT}"`                      &&

  NEW_VFSTYPE=`"${DIALOG[@]}"  --menu               \
                    "Please select a file system."  \
                    7 60 0                          \
                    $FILESYSTEMS`                   &&

  NEW_OPTIONS=`"${DIALOG[@]}" --inputbox            \
                    "Please enter mounting options" \
                    8 60                            \
                    "${OPTIONS}"`                   &&

  ROOT="${NEW_ROOT}" &&
  VFSTYPE="${NEW_VFSTYPE}" &&
  OPTIONS="${NEW_OPTIONS}"

}

main_menu()  {

    HOTPLUG_ACTION="disable"
    # NOTE: this is the opposite of the status of the toggle

    while true;
      do

      M_HELP="Select modules to load"
      S_HELP="Shell out for a moment"
      H_HELP="toggle if the ISO runs hotplug"
      R_HELP="Choose the device to be mounted as /"
      D_HELP="Continue the normal boot process"

      scan_cdroms

      if  [  -z  "$SMGL_CD"  ]   &&
          [  -z  "$ROOT"    ];  then

          HELP="Load the correct low level SCSI driver kernel module
                to be able to detect and read the SCSI CDROM."

          DEFAULT_ITEM="M"

      elif  [  -z  "$ROOT"  ];  then

          HELP="The Source Mage GNU/Linux Install/Rescue CDROM is
                detected on $SMGL_CD"

          DEFAULT_ITEM="D"

      else

          HELP="You have selected to mount $ROOT as the root file
                system."

          DEFAULT_ITEM="D"

      fi

      COMMAND=`"${DIALOG[@]}"  --title  "Initrd Menu"         \
                        --nocancel                            \
                        --item-help                           \
                        --default-item  "$DEFAULT_ITEM"       \
                        --menu                                \
                        "$HELP"                               \
                        8 60 0                                \
                        "M"  "Load modules "       "$M_HELP"  \
                        "S"  "Shell "              "$S_HELP"  \
                        "H"  "$HOTPLUG_ACTION hotplug" "$H_HELP" \
                        "R"  "Choose root device (For rescue mode)" "$R_HELP" \
                        "D"  "Continue booting "   "$D_HELP"`

      case  $COMMAND  in
          M)  load_module  ;;
          S)  shell        ;;
          H)  toggle_hotplug ;;
          R)  select_root  ;;
          D)  return       ;;
      esac

    done
}


main()  {

  while true ;do

    main_menu
    if  [ -z $ROOT ] && [ -z $SMGL_CD ] ;then
      # height is 6 lines :
      # 1 line for drawing a top line
      # 1 line for a blank line
      # 1 line of text
      # 1 line for drawing a line
      # 1 line for <OK> button
      # 1 line for drawing a bottom line
      "${DIALOG[@]}" --msgbox "Unable to boot without a root." 6 60
      continue
    fi

       ROOT=${ROOT:-$SMGL_CD}
    VFSTYPE=${VFSTYPE:-iso9660}
    OPTIONS=${OPTIONS:-"defaults,ro"}

    mount -n -t $VFSTYPE  -o $OPTIONS  $ROOT  $MOUNT ||
    {
      "${DIALOG[@]}" --msgbox "Unable to mount $ROOT as $VFSTYPE." 6 60
      continue
    }

    if [ ! -x $MOUNT/sbin/init ]; then
      "${DIALOG[@]}" --msgbox "Unable to locate /sbin/init on $ROOT." 6 60
      umount -n $MOUNT
      continue
    fi

    umount -n /proc

    # setup writable /etc /root and nfs stat dir if ISO is ROOT
    if [ -f $ID ] ;then
      /bin/mount -t $VFSTYPE -o $OPTIONS $ROOT $MOUNT/mnt/cdrom
      cd $MOUNT/mnt/cdrom
      #set up writeable /dev
      echo "Setting up writeable /dev for the udevness"
      /bin/mount -t tmpfs tmpfs $MOUNT/dev
      $MOUNT/bin/cp -a --parents dev $MOUNT

      for i in etc root var/log var/lib/nfs ;do
        echo "NOT!!! Setting up writable /$i for install"
        #/bin/mount -t tmpfs tmpfs $MOUNT/$i
        #$MOUNT/bin/cp -a --parents $i $MOUNT
      done
      cd $MOUNT
      /bin/umount $MOUNT/mnt/cdrom

      # Installer needs this to do its "eject CD" magic
      echo "$ROOT" >$MOUNT/etc/cddev
    fi

    if [[ "$HOTPLUG_ACTION" == "enable" ]] ;then
      # Menu entry was "enable", so it was set to disabled
      $MOUNT/bin/chmod a-x $MOUNT/etc/init.d/runlevels/%S/hotplug
    fi

    cd $MOUNT

    if  [  -d  initrd  ];  then
       pivot_root  .  initrd
    else
       pivot_root  .  mnt
    fi

    echo "Running /sbin/init $@"

# if the new root filesystem uses devfs, /dev/console should not exist
    if [ ! -e dev/console ]; then
      mount -n -t devfs  devfs  dev
    fi

    mount -n -t proc proc proc

    exec chroot . /sbin/init "$@" <dev/console >dev/console 2>&1

  done

}

# here is the real start of this shell script

export PATH=/bin:/usr/bin:/sbin:/usr/sbin

DIALOG=( "dialog" "--trim" "--stdout" \
         "--backtitle" "Source Mage GNU/Linux initrd" )

mount -n -t proc  proc  /proc

KERNEL=`uname -r`
 MOUNT=/mnt/cdrom
    ID=$MOUNT/etc/sourcemage_version

main "$@"
